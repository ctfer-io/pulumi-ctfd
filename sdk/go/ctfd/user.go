// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CTFd defines a User as someone who will either play or administrate the Capture The Flag event.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ctfd.NewUser(ctx, "ctfer", &ctfd.UserArgs{
//				Email:    pulumi.String("ctfer-io@protonmail.com"),
//				Hidden:   pulumi.Bool(true),
//				Password: pulumi.String("password"),
//				Type:     pulumi.String("admin"),
//				Verified: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type User struct {
	pulumi.CustomResourceState

	// Affiliation to a team, company or agency.
	Affiliation pulumi.StringPtrOutput `pulumi:"affiliation"`
	// Is true if the user is banned from the CTF.
	Banned pulumi.BoolOutput `pulumi:"banned"`
	// Country the user represent or is native from.
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// Email of the user, may be used to verify the account.
	Email pulumi.StringOutput `pulumi:"email"`
	// Is true if the user is hidden to the participants.
	Hidden pulumi.BoolOutput `pulumi:"hidden"`
	// Language the user is fluent in.
	Language pulumi.StringPtrOutput `pulumi:"language"`
	// Name or pseudo of the user.
	Name pulumi.StringOutput `pulumi:"name"`
	// Password of the user. Notice than during a CTF you may not want to update those to avoid defaulting user accesses.
	Password pulumi.StringOutput `pulumi:"password"`
	// Generic type for RBAC purposes.
	Type pulumi.StringOutput `pulumi:"type"`
	// Is true if the user has verified its account by email, or if set by an admin.
	Verified pulumi.BoolOutput `pulumi:"verified"`
	// Website, blog, or anything similar (displayed to other participants).
	Website pulumi.StringPtrOutput `pulumi:"website"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Email != nil {
		args.Email = pulumi.ToSecret(args.Email).(pulumi.StringInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"email",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("ctfd:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("ctfd:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Affiliation to a team, company or agency.
	Affiliation *string `pulumi:"affiliation"`
	// Is true if the user is banned from the CTF.
	Banned *bool `pulumi:"banned"`
	// Country the user represent or is native from.
	Country *string `pulumi:"country"`
	// Email of the user, may be used to verify the account.
	Email *string `pulumi:"email"`
	// Is true if the user is hidden to the participants.
	Hidden *bool `pulumi:"hidden"`
	// Language the user is fluent in.
	Language *string `pulumi:"language"`
	// Name or pseudo of the user.
	Name *string `pulumi:"name"`
	// Password of the user. Notice than during a CTF you may not want to update those to avoid defaulting user accesses.
	Password *string `pulumi:"password"`
	// Generic type for RBAC purposes.
	Type *string `pulumi:"type"`
	// Is true if the user has verified its account by email, or if set by an admin.
	Verified *bool `pulumi:"verified"`
	// Website, blog, or anything similar (displayed to other participants).
	Website *string `pulumi:"website"`
}

type UserState struct {
	// Affiliation to a team, company or agency.
	Affiliation pulumi.StringPtrInput
	// Is true if the user is banned from the CTF.
	Banned pulumi.BoolPtrInput
	// Country the user represent or is native from.
	Country pulumi.StringPtrInput
	// Email of the user, may be used to verify the account.
	Email pulumi.StringPtrInput
	// Is true if the user is hidden to the participants.
	Hidden pulumi.BoolPtrInput
	// Language the user is fluent in.
	Language pulumi.StringPtrInput
	// Name or pseudo of the user.
	Name pulumi.StringPtrInput
	// Password of the user. Notice than during a CTF you may not want to update those to avoid defaulting user accesses.
	Password pulumi.StringPtrInput
	// Generic type for RBAC purposes.
	Type pulumi.StringPtrInput
	// Is true if the user has verified its account by email, or if set by an admin.
	Verified pulumi.BoolPtrInput
	// Website, blog, or anything similar (displayed to other participants).
	Website pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Affiliation to a team, company or agency.
	Affiliation *string `pulumi:"affiliation"`
	// Is true if the user is banned from the CTF.
	Banned *bool `pulumi:"banned"`
	// Country the user represent or is native from.
	Country *string `pulumi:"country"`
	// Email of the user, may be used to verify the account.
	Email string `pulumi:"email"`
	// Is true if the user is hidden to the participants.
	Hidden *bool `pulumi:"hidden"`
	// Language the user is fluent in.
	Language *string `pulumi:"language"`
	// Name or pseudo of the user.
	Name *string `pulumi:"name"`
	// Password of the user. Notice than during a CTF you may not want to update those to avoid defaulting user accesses.
	Password string `pulumi:"password"`
	// Generic type for RBAC purposes.
	Type *string `pulumi:"type"`
	// Is true if the user has verified its account by email, or if set by an admin.
	Verified *bool `pulumi:"verified"`
	// Website, blog, or anything similar (displayed to other participants).
	Website *string `pulumi:"website"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Affiliation to a team, company or agency.
	Affiliation pulumi.StringPtrInput
	// Is true if the user is banned from the CTF.
	Banned pulumi.BoolPtrInput
	// Country the user represent or is native from.
	Country pulumi.StringPtrInput
	// Email of the user, may be used to verify the account.
	Email pulumi.StringInput
	// Is true if the user is hidden to the participants.
	Hidden pulumi.BoolPtrInput
	// Language the user is fluent in.
	Language pulumi.StringPtrInput
	// Name or pseudo of the user.
	Name pulumi.StringPtrInput
	// Password of the user. Notice than during a CTF you may not want to update those to avoid defaulting user accesses.
	Password pulumi.StringInput
	// Generic type for RBAC purposes.
	Type pulumi.StringPtrInput
	// Is true if the user has verified its account by email, or if set by an admin.
	Verified pulumi.BoolPtrInput
	// Website, blog, or anything similar (displayed to other participants).
	Website pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Affiliation to a team, company or agency.
func (o UserOutput) Affiliation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Affiliation }).(pulumi.StringPtrOutput)
}

// Is true if the user is banned from the CTF.
func (o UserOutput) Banned() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.Banned }).(pulumi.BoolOutput)
}

// Country the user represent or is native from.
func (o UserOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// Email of the user, may be used to verify the account.
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Is true if the user is hidden to the participants.
func (o UserOutput) Hidden() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.Hidden }).(pulumi.BoolOutput)
}

// Language the user is fluent in.
func (o UserOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

// Name or pseudo of the user.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password of the user. Notice than during a CTF you may not want to update those to avoid defaulting user accesses.
func (o UserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Generic type for RBAC purposes.
func (o UserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Is true if the user has verified its account by email, or if set by an admin.
func (o UserOutput) Verified() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.Verified }).(pulumi.BoolOutput)
}

// Website, blog, or anything similar (displayed to other participants).
func (o UserOutput) Website() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Website }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
