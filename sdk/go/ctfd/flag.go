// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfd/sdk/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A flag to solve the challenge.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/go/ctfd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			http, err := ctfd.NewChallengeDynamic(ctx, "http", &ctfd.ChallengeDynamicArgs{
//				Category:    pulumi.String("misc"),
//				Description: pulumi.String("..."),
//				Value:       pulumi.Int(500),
//				Decay:       pulumi.Int(100),
//				Minimum:     pulumi.Int(50),
//				State:       pulumi.String("visible"),
//				Function:    pulumi.String("logarithmic"),
//				Topics: pulumi.StringArray{
//					pulumi.String("Misc"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("misc"),
//					pulumi.String("basic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewFlag(ctx, "httpFlag", &ctfd.FlagArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("CTF{some_flag}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Flag struct {
	pulumi.CustomResourceState

	// Challenge of the flag.
	ChallengeId pulumi.StringOutput `pulumi:"challengeId"`
	// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
	Content pulumi.StringOutput `pulumi:"content"`
	// The flag sensitivity information, either case*sensitive or case*insensitive
	Data pulumi.StringOutput `pulumi:"data"`
	// The type of the flag, could be either static or regex
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFlag registers a new resource with the given unique name, arguments, and options.
func NewFlag(ctx *pulumi.Context,
	name string, args *FlagArgs, opts ...pulumi.ResourceOption) (*Flag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChallengeId == nil {
		return nil, errors.New("invalid value for required argument 'ChallengeId'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Content != nil {
		args.Content = pulumi.ToSecret(args.Content).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"content",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Flag
	err := ctx.RegisterResource("ctfd:index/flag:Flag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlag gets an existing Flag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlagState, opts ...pulumi.ResourceOption) (*Flag, error) {
	var resource Flag
	err := ctx.ReadResource("ctfd:index/flag:Flag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Flag resources.
type flagState struct {
	// Challenge of the flag.
	ChallengeId *string `pulumi:"challengeId"`
	// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
	Content *string `pulumi:"content"`
	// The flag sensitivity information, either case*sensitive or case*insensitive
	Data *string `pulumi:"data"`
	// The type of the flag, could be either static or regex
	Type *string `pulumi:"type"`
}

type FlagState struct {
	// Challenge of the flag.
	ChallengeId pulumi.StringPtrInput
	// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
	Content pulumi.StringPtrInput
	// The flag sensitivity information, either case*sensitive or case*insensitive
	Data pulumi.StringPtrInput
	// The type of the flag, could be either static or regex
	Type pulumi.StringPtrInput
}

func (FlagState) ElementType() reflect.Type {
	return reflect.TypeOf((*flagState)(nil)).Elem()
}

type flagArgs struct {
	// Challenge of the flag.
	ChallengeId string `pulumi:"challengeId"`
	// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
	Content string `pulumi:"content"`
	// The flag sensitivity information, either case*sensitive or case*insensitive
	Data *string `pulumi:"data"`
	// The type of the flag, could be either static or regex
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Flag resource.
type FlagArgs struct {
	// Challenge of the flag.
	ChallengeId pulumi.StringInput
	// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
	Content pulumi.StringInput
	// The flag sensitivity information, either case*sensitive or case*insensitive
	Data pulumi.StringPtrInput
	// The type of the flag, could be either static or regex
	Type pulumi.StringPtrInput
}

func (FlagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flagArgs)(nil)).Elem()
}

type FlagInput interface {
	pulumi.Input

	ToFlagOutput() FlagOutput
	ToFlagOutputWithContext(ctx context.Context) FlagOutput
}

func (*Flag) ElementType() reflect.Type {
	return reflect.TypeOf((**Flag)(nil)).Elem()
}

func (i *Flag) ToFlagOutput() FlagOutput {
	return i.ToFlagOutputWithContext(context.Background())
}

func (i *Flag) ToFlagOutputWithContext(ctx context.Context) FlagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlagOutput)
}

// FlagArrayInput is an input type that accepts FlagArray and FlagArrayOutput values.
// You can construct a concrete instance of `FlagArrayInput` via:
//
//	FlagArray{ FlagArgs{...} }
type FlagArrayInput interface {
	pulumi.Input

	ToFlagArrayOutput() FlagArrayOutput
	ToFlagArrayOutputWithContext(context.Context) FlagArrayOutput
}

type FlagArray []FlagInput

func (FlagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Flag)(nil)).Elem()
}

func (i FlagArray) ToFlagArrayOutput() FlagArrayOutput {
	return i.ToFlagArrayOutputWithContext(context.Background())
}

func (i FlagArray) ToFlagArrayOutputWithContext(ctx context.Context) FlagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlagArrayOutput)
}

// FlagMapInput is an input type that accepts FlagMap and FlagMapOutput values.
// You can construct a concrete instance of `FlagMapInput` via:
//
//	FlagMap{ "key": FlagArgs{...} }
type FlagMapInput interface {
	pulumi.Input

	ToFlagMapOutput() FlagMapOutput
	ToFlagMapOutputWithContext(context.Context) FlagMapOutput
}

type FlagMap map[string]FlagInput

func (FlagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Flag)(nil)).Elem()
}

func (i FlagMap) ToFlagMapOutput() FlagMapOutput {
	return i.ToFlagMapOutputWithContext(context.Background())
}

func (i FlagMap) ToFlagMapOutputWithContext(ctx context.Context) FlagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlagMapOutput)
}

type FlagOutput struct{ *pulumi.OutputState }

func (FlagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Flag)(nil)).Elem()
}

func (o FlagOutput) ToFlagOutput() FlagOutput {
	return o
}

func (o FlagOutput) ToFlagOutputWithContext(ctx context.Context) FlagOutput {
	return o
}

// Challenge of the flag.
func (o FlagOutput) ChallengeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Flag) pulumi.StringOutput { return v.ChallengeId }).(pulumi.StringOutput)
}

// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
func (o FlagOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Flag) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The flag sensitivity information, either case*sensitive or case*insensitive
func (o FlagOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *Flag) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

// The type of the flag, could be either static or regex
func (o FlagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Flag) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FlagArrayOutput struct{ *pulumi.OutputState }

func (FlagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Flag)(nil)).Elem()
}

func (o FlagArrayOutput) ToFlagArrayOutput() FlagArrayOutput {
	return o
}

func (o FlagArrayOutput) ToFlagArrayOutputWithContext(ctx context.Context) FlagArrayOutput {
	return o
}

func (o FlagArrayOutput) Index(i pulumi.IntInput) FlagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Flag {
		return vs[0].([]*Flag)[vs[1].(int)]
	}).(FlagOutput)
}

type FlagMapOutput struct{ *pulumi.OutputState }

func (FlagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Flag)(nil)).Elem()
}

func (o FlagMapOutput) ToFlagMapOutput() FlagMapOutput {
	return o
}

func (o FlagMapOutput) ToFlagMapOutputWithContext(ctx context.Context) FlagMapOutput {
	return o
}

func (o FlagMapOutput) MapIndex(k pulumi.StringInput) FlagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Flag {
		return vs[0].(map[string]*Flag)[vs[1].(string)]
	}).(FlagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlagInput)(nil)).Elem(), &Flag{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlagArrayInput)(nil)).Elem(), FlagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlagMapInput)(nil)).Elem(), FlagMap{})
	pulumi.RegisterOutputType(FlagOutput{})
	pulumi.RegisterOutputType(FlagArrayOutput{})
	pulumi.RegisterOutputType(FlagMapOutput{})
}
