// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfd/sdk/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
//
// This implementation has support of a more dynamic behavior for its scoring through time/solves thus is different from a standard challenge.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/go/ctfd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) string {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return base64.StdEncoding.EncodeToString(fileData[:])
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			http, err := ctfd.NewChallengeDynamic(ctx, "http", &ctfd.ChallengeDynamicArgs{
//				Category:    pulumi.String("misc"),
//				Description: pulumi.String("..."),
//				Value:       pulumi.Int(500),
//				Decay:       pulumi.Int(100),
//				Minimum:     pulumi.Int(50),
//				State:       pulumi.String("visible"),
//				Function:    pulumi.String("logarithmic"),
//				Topics: pulumi.StringArray{
//					pulumi.String("Misc"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("misc"),
//					pulumi.String("basic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewFlag(ctx, "httpFlag", &ctfd.FlagArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("CTF{some_flag}"),
//			})
//			if err != nil {
//				return err
//			}
//			httpHint1, err := ctfd.NewHint(ctx, "httpHint1", &ctfd.HintArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("Some super-helpful hint"),
//				Cost:        pulumi.Int(50),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewHint(ctx, "httpHint2", &ctfd.HintArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("Even more helpful hint !"),
//				Cost:        pulumi.Int(50),
//				Requirements: pulumi.StringArray{
//					httpHint1.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewFile(ctx, "httpFile", &ctfd.FileArgs{
//				ChallengeId: http.ID(),
//				Contentb64:  pulumi.String(filebase64OrPanic(".../image.png")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ChallengeDynamic struct {
	pulumi.CustomResourceState

	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringPtrOutput `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringOutput `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringOutput `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntOutput `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringOutput `pulumi:"description"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringOutput `pulumi:"function"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntOutput `pulumi:"maxAttempts"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntOutput `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name pulumi.StringOutput `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrOutput `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements ChallengeDynamicRequirementsPtrOutput `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State pulumi.StringOutput `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value pulumi.IntOutput `pulumi:"value"`
}

// NewChallengeDynamic registers a new resource with the given unique name, arguments, and options.
func NewChallengeDynamic(ctx *pulumi.Context,
	name string, args *ChallengeDynamicArgs, opts ...pulumi.ResourceOption) (*ChallengeDynamic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.Decay == nil {
		return nil, errors.New("invalid value for required argument 'Decay'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Minimum == nil {
		return nil, errors.New("invalid value for required argument 'Minimum'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChallengeDynamic
	err := ctx.RegisterResource("ctfd:index/challengeDynamic:ChallengeDynamic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChallengeDynamic gets an existing ChallengeDynamic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChallengeDynamic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChallengeDynamicState, opts ...pulumi.ResourceOption) (*ChallengeDynamic, error) {
	var resource ChallengeDynamic
	err := ctx.ReadResource("ctfd:index/challengeDynamic:ChallengeDynamic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChallengeDynamic resources.
type challengeDynamicState struct {
	// Attribution to the creator(s) of the challenge.
	Attribution *string `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category *string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo *string `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay *int `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description *string `pulumi:"description"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function *string `pulumi:"function"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts *int `pulumi:"maxAttempts"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum *int `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name *string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next *int `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements *ChallengeDynamicRequirements `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State *string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value *int `pulumi:"value"`
}

type ChallengeDynamicState struct {
	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringPtrInput
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringPtrInput
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringPtrInput
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntPtrInput
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringPtrInput
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringPtrInput
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntPtrInput
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntPtrInput
	// Name of the challenge, displayed as it.
	Name pulumi.StringPtrInput
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrInput
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements ChallengeDynamicRequirementsPtrInput
	// State of the challenge, either hidden or visible.
	State pulumi.StringPtrInput
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value pulumi.IntPtrInput
}

func (ChallengeDynamicState) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeDynamicState)(nil)).Elem()
}

type challengeDynamicArgs struct {
	// Attribution to the creator(s) of the challenge.
	Attribution *string `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo *string `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay int `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description string `pulumi:"description"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function *string `pulumi:"function"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts *int `pulumi:"maxAttempts"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum int `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name *string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next *int `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements *ChallengeDynamicRequirements `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State *string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value int `pulumi:"value"`
}

// The set of arguments for constructing a ChallengeDynamic resource.
type ChallengeDynamicArgs struct {
	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringPtrInput
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringInput
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringPtrInput
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntInput
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringInput
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringPtrInput
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntPtrInput
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntInput
	// Name of the challenge, displayed as it.
	Name pulumi.StringPtrInput
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrInput
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements ChallengeDynamicRequirementsPtrInput
	// State of the challenge, either hidden or visible.
	State pulumi.StringPtrInput
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput
	// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
	Value pulumi.IntInput
}

func (ChallengeDynamicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeDynamicArgs)(nil)).Elem()
}

type ChallengeDynamicInput interface {
	pulumi.Input

	ToChallengeDynamicOutput() ChallengeDynamicOutput
	ToChallengeDynamicOutputWithContext(ctx context.Context) ChallengeDynamicOutput
}

func (*ChallengeDynamic) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamic)(nil)).Elem()
}

func (i *ChallengeDynamic) ToChallengeDynamicOutput() ChallengeDynamicOutput {
	return i.ToChallengeDynamicOutputWithContext(context.Background())
}

func (i *ChallengeDynamic) ToChallengeDynamicOutputWithContext(ctx context.Context) ChallengeDynamicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicOutput)
}

// ChallengeDynamicArrayInput is an input type that accepts ChallengeDynamicArray and ChallengeDynamicArrayOutput values.
// You can construct a concrete instance of `ChallengeDynamicArrayInput` via:
//
//	ChallengeDynamicArray{ ChallengeDynamicArgs{...} }
type ChallengeDynamicArrayInput interface {
	pulumi.Input

	ToChallengeDynamicArrayOutput() ChallengeDynamicArrayOutput
	ToChallengeDynamicArrayOutputWithContext(context.Context) ChallengeDynamicArrayOutput
}

type ChallengeDynamicArray []ChallengeDynamicInput

func (ChallengeDynamicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengeDynamic)(nil)).Elem()
}

func (i ChallengeDynamicArray) ToChallengeDynamicArrayOutput() ChallengeDynamicArrayOutput {
	return i.ToChallengeDynamicArrayOutputWithContext(context.Background())
}

func (i ChallengeDynamicArray) ToChallengeDynamicArrayOutputWithContext(ctx context.Context) ChallengeDynamicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicArrayOutput)
}

// ChallengeDynamicMapInput is an input type that accepts ChallengeDynamicMap and ChallengeDynamicMapOutput values.
// You can construct a concrete instance of `ChallengeDynamicMapInput` via:
//
//	ChallengeDynamicMap{ "key": ChallengeDynamicArgs{...} }
type ChallengeDynamicMapInput interface {
	pulumi.Input

	ToChallengeDynamicMapOutput() ChallengeDynamicMapOutput
	ToChallengeDynamicMapOutputWithContext(context.Context) ChallengeDynamicMapOutput
}

type ChallengeDynamicMap map[string]ChallengeDynamicInput

func (ChallengeDynamicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengeDynamic)(nil)).Elem()
}

func (i ChallengeDynamicMap) ToChallengeDynamicMapOutput() ChallengeDynamicMapOutput {
	return i.ToChallengeDynamicMapOutputWithContext(context.Background())
}

func (i ChallengeDynamicMap) ToChallengeDynamicMapOutputWithContext(ctx context.Context) ChallengeDynamicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicMapOutput)
}

type ChallengeDynamicOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamic)(nil)).Elem()
}

func (o ChallengeDynamicOutput) ToChallengeDynamicOutput() ChallengeDynamicOutput {
	return o
}

func (o ChallengeDynamicOutput) ToChallengeDynamicOutputWithContext(ctx context.Context) ChallengeDynamicOutput {
	return o
}

// Attribution to the creator(s) of the challenge.
func (o ChallengeDynamicOutput) Attribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringPtrOutput { return v.Attribution }).(pulumi.StringPtrOutput)
}

// Category of the challenge that CTFd groups by on the web UI.
func (o ChallengeDynamicOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
func (o ChallengeDynamicOutput) ConnectionInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringOutput { return v.ConnectionInfo }).(pulumi.StringOutput)
}

// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
func (o ChallengeDynamicOutput) Decay() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.IntOutput { return v.Decay }).(pulumi.IntOutput)
}

// Description of the challenge, consider using multiline descriptions for better style.
func (o ChallengeDynamicOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
func (o ChallengeDynamicOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// Maximum amount of attempts before being unable to flag the challenge.
func (o ChallengeDynamicOutput) MaxAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.IntOutput { return v.MaxAttempts }).(pulumi.IntOutput)
}

// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
func (o ChallengeDynamicOutput) Minimum() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.IntOutput { return v.Minimum }).(pulumi.IntOutput)
}

// Name of the challenge, displayed as it.
func (o ChallengeDynamicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Suggestion for the end-user as next challenge to work on.
func (o ChallengeDynamicOutput) Next() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.IntPtrOutput { return v.Next }).(pulumi.IntPtrOutput)
}

// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
func (o ChallengeDynamicOutput) Requirements() ChallengeDynamicRequirementsPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamic) ChallengeDynamicRequirementsPtrOutput { return v.Requirements }).(ChallengeDynamicRequirementsPtrOutput)
}

// State of the challenge, either hidden or visible.
func (o ChallengeDynamicOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
func (o ChallengeDynamicOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of challenge topics that are displayed to the administrators for maintenance and planification.
func (o ChallengeDynamicOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
func (o ChallengeDynamicOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v *ChallengeDynamic) pulumi.IntOutput { return v.Value }).(pulumi.IntOutput)
}

type ChallengeDynamicArrayOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChallengeDynamic)(nil)).Elem()
}

func (o ChallengeDynamicArrayOutput) ToChallengeDynamicArrayOutput() ChallengeDynamicArrayOutput {
	return o
}

func (o ChallengeDynamicArrayOutput) ToChallengeDynamicArrayOutputWithContext(ctx context.Context) ChallengeDynamicArrayOutput {
	return o
}

func (o ChallengeDynamicArrayOutput) Index(i pulumi.IntInput) ChallengeDynamicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChallengeDynamic {
		return vs[0].([]*ChallengeDynamic)[vs[1].(int)]
	}).(ChallengeDynamicOutput)
}

type ChallengeDynamicMapOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChallengeDynamic)(nil)).Elem()
}

func (o ChallengeDynamicMapOutput) ToChallengeDynamicMapOutput() ChallengeDynamicMapOutput {
	return o
}

func (o ChallengeDynamicMapOutput) ToChallengeDynamicMapOutputWithContext(ctx context.Context) ChallengeDynamicMapOutput {
	return o
}

func (o ChallengeDynamicMapOutput) MapIndex(k pulumi.StringInput) ChallengeDynamicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChallengeDynamic {
		return vs[0].(map[string]*ChallengeDynamic)[vs[1].(string)]
	}).(ChallengeDynamicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicInput)(nil)).Elem(), &ChallengeDynamic{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicArrayInput)(nil)).Elem(), ChallengeDynamicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicMapInput)(nil)).Elem(), ChallengeDynamicMap{})
	pulumi.RegisterOutputType(ChallengeDynamicOutput{})
	pulumi.RegisterOutputType(ChallengeDynamicArrayOutput{})
	pulumi.RegisterOutputType(ChallengeDynamicMapOutput{})
}
