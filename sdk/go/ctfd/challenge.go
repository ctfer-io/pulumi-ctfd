// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfd/sdk/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
//
// This provider builds a cleaner API on top of CTFd's one to improve its adoption and lifecycle management.
//
// ## Import
//
// Challenge can be imported by the CTFd ID (check URLs)
//
// ```sh
// $ pulumi import ctfd:index/challenge:Challenge http 1
// ```
type Challenge struct {
	pulumi.CustomResourceState

	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringOutput `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringOutput `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntPtrOutput `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringOutput `pulumi:"description"`
	// List of files given to players to flag the challenge.
	Files ChallengeFileArrayOutput `pulumi:"files"`
	// List of challenge flags that solves it.
	Flags ChallengeFlagArrayOutput `pulumi:"flags"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringOutput `pulumi:"function"`
	// List of hints about the challenge displayed to the end-user.
	Hints ChallengeHintArrayOutput `pulumi:"hints"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntOutput `pulumi:"maxAttempts"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntPtrOutput `pulumi:"minimum"`
	// Name of the file as displayed to end-users.
	Name pulumi.StringOutput `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrOutput `pulumi:"next"`
	// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
	Requirements ChallengeRequirementsPtrOutput `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State pulumi.StringOutput `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayOutput `pulumi:"topics"`
	// The type of the flag, could be either static or regex
	Type pulumi.StringOutput `pulumi:"type"`
	// The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
	Value pulumi.IntOutput `pulumi:"value"`
}

// NewChallenge registers a new resource with the given unique name, arguments, and options.
func NewChallenge(ctx *pulumi.Context,
	name string, args *ChallengeArgs, opts ...pulumi.ResourceOption) (*Challenge, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Challenge
	err := ctx.RegisterResource("ctfd:index/challenge:Challenge", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChallenge gets an existing Challenge resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChallenge(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChallengeState, opts ...pulumi.ResourceOption) (*Challenge, error) {
	var resource Challenge
	err := ctx.ReadResource("ctfd:index/challenge:Challenge", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Challenge resources.
type challengeState struct {
	// Category of the challenge that CTFd groups by on the web UI.
	Category *string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo *string `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay *int `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description *string `pulumi:"description"`
	// List of files given to players to flag the challenge.
	Files []ChallengeFile `pulumi:"files"`
	// List of challenge flags that solves it.
	Flags []ChallengeFlag `pulumi:"flags"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function *string `pulumi:"function"`
	// List of hints about the challenge displayed to the end-user.
	Hints []ChallengeHint `pulumi:"hints"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts *int `pulumi:"maxAttempts"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum *int `pulumi:"minimum"`
	// Name of the file as displayed to end-users.
	Name *string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next *int `pulumi:"next"`
	// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
	Requirements *ChallengeRequirements `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State *string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	// The type of the flag, could be either static or regex
	Type *string `pulumi:"type"`
	// The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
	Value *int `pulumi:"value"`
}

type ChallengeState struct {
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringPtrInput
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringPtrInput
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntPtrInput
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringPtrInput
	// List of files given to players to flag the challenge.
	Files ChallengeFileArrayInput
	// List of challenge flags that solves it.
	Flags ChallengeFlagArrayInput
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringPtrInput
	// List of hints about the challenge displayed to the end-user.
	Hints ChallengeHintArrayInput
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntPtrInput
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntPtrInput
	// Name of the file as displayed to end-users.
	Name pulumi.StringPtrInput
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrInput
	// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
	Requirements ChallengeRequirementsPtrInput
	// State of the challenge, either hidden or visible.
	State pulumi.StringPtrInput
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput
	// The type of the flag, could be either static or regex
	Type pulumi.StringPtrInput
	// The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
	Value pulumi.IntPtrInput
}

func (ChallengeState) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeState)(nil)).Elem()
}

type challengeArgs struct {
	// Category of the challenge that CTFd groups by on the web UI.
	Category string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo *string `pulumi:"connectionInfo"`
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay *int `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description string `pulumi:"description"`
	// List of files given to players to flag the challenge.
	Files []ChallengeFile `pulumi:"files"`
	// List of challenge flags that solves it.
	Flags []ChallengeFlag `pulumi:"flags"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function *string `pulumi:"function"`
	// List of hints about the challenge displayed to the end-user.
	Hints []ChallengeHint `pulumi:"hints"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts *int `pulumi:"maxAttempts"`
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum *int `pulumi:"minimum"`
	// Name of the file as displayed to end-users.
	Name *string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next *int `pulumi:"next"`
	// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
	Requirements *ChallengeRequirements `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State *string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	// The type of the flag, could be either static or regex
	Type *string `pulumi:"type"`
	// The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
	Value int `pulumi:"value"`
}

// The set of arguments for constructing a Challenge resource.
type ChallengeArgs struct {
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringInput
	// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
	ConnectionInfo pulumi.StringPtrInput
	// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
	Decay pulumi.IntPtrInput
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringInput
	// List of files given to players to flag the challenge.
	Files ChallengeFileArrayInput
	// List of challenge flags that solves it.
	Flags ChallengeFlagArrayInput
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringPtrInput
	// List of hints about the challenge displayed to the end-user.
	Hints ChallengeHintArrayInput
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntPtrInput
	// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
	Minimum pulumi.IntPtrInput
	// Name of the file as displayed to end-users.
	Name pulumi.StringPtrInput
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntPtrInput
	// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
	Requirements ChallengeRequirementsPtrInput
	// State of the challenge, either hidden or visible.
	State pulumi.StringPtrInput
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput
	// The type of the flag, could be either static or regex
	Type pulumi.StringPtrInput
	// The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
	Value pulumi.IntInput
}

func (ChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeArgs)(nil)).Elem()
}

type ChallengeInput interface {
	pulumi.Input

	ToChallengeOutput() ChallengeOutput
	ToChallengeOutputWithContext(ctx context.Context) ChallengeOutput
}

func (*Challenge) ElementType() reflect.Type {
	return reflect.TypeOf((**Challenge)(nil)).Elem()
}

func (i *Challenge) ToChallengeOutput() ChallengeOutput {
	return i.ToChallengeOutputWithContext(context.Background())
}

func (i *Challenge) ToChallengeOutputWithContext(ctx context.Context) ChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeOutput)
}

// ChallengeArrayInput is an input type that accepts ChallengeArray and ChallengeArrayOutput values.
// You can construct a concrete instance of `ChallengeArrayInput` via:
//
//	ChallengeArray{ ChallengeArgs{...} }
type ChallengeArrayInput interface {
	pulumi.Input

	ToChallengeArrayOutput() ChallengeArrayOutput
	ToChallengeArrayOutputWithContext(context.Context) ChallengeArrayOutput
}

type ChallengeArray []ChallengeInput

func (ChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Challenge)(nil)).Elem()
}

func (i ChallengeArray) ToChallengeArrayOutput() ChallengeArrayOutput {
	return i.ToChallengeArrayOutputWithContext(context.Background())
}

func (i ChallengeArray) ToChallengeArrayOutputWithContext(ctx context.Context) ChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeArrayOutput)
}

// ChallengeMapInput is an input type that accepts ChallengeMap and ChallengeMapOutput values.
// You can construct a concrete instance of `ChallengeMapInput` via:
//
//	ChallengeMap{ "key": ChallengeArgs{...} }
type ChallengeMapInput interface {
	pulumi.Input

	ToChallengeMapOutput() ChallengeMapOutput
	ToChallengeMapOutputWithContext(context.Context) ChallengeMapOutput
}

type ChallengeMap map[string]ChallengeInput

func (ChallengeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Challenge)(nil)).Elem()
}

func (i ChallengeMap) ToChallengeMapOutput() ChallengeMapOutput {
	return i.ToChallengeMapOutputWithContext(context.Background())
}

func (i ChallengeMap) ToChallengeMapOutputWithContext(ctx context.Context) ChallengeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeMapOutput)
}

type ChallengeOutput struct{ *pulumi.OutputState }

func (ChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Challenge)(nil)).Elem()
}

func (o ChallengeOutput) ToChallengeOutput() ChallengeOutput {
	return o
}

func (o ChallengeOutput) ToChallengeOutputWithContext(ctx context.Context) ChallengeOutput {
	return o
}

// Category of the challenge that CTFd groups by on the web UI.
func (o ChallengeOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
func (o ChallengeOutput) ConnectionInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringOutput { return v.ConnectionInfo }).(pulumi.StringOutput)
}

// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
func (o ChallengeOutput) Decay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Challenge) pulumi.IntPtrOutput { return v.Decay }).(pulumi.IntPtrOutput)
}

// Description of the challenge, consider using multiline descriptions for better style.
func (o ChallengeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of files given to players to flag the challenge.
func (o ChallengeOutput) Files() ChallengeFileArrayOutput {
	return o.ApplyT(func(v *Challenge) ChallengeFileArrayOutput { return v.Files }).(ChallengeFileArrayOutput)
}

// List of challenge flags that solves it.
func (o ChallengeOutput) Flags() ChallengeFlagArrayOutput {
	return o.ApplyT(func(v *Challenge) ChallengeFlagArrayOutput { return v.Flags }).(ChallengeFlagArrayOutput)
}

// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
func (o ChallengeOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringOutput { return v.Function }).(pulumi.StringOutput)
}

// List of hints about the challenge displayed to the end-user.
func (o ChallengeOutput) Hints() ChallengeHintArrayOutput {
	return o.ApplyT(func(v *Challenge) ChallengeHintArrayOutput { return v.Hints }).(ChallengeHintArrayOutput)
}

// Maximum amount of attempts before being unable to flag the challenge.
func (o ChallengeOutput) MaxAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *Challenge) pulumi.IntOutput { return v.MaxAttempts }).(pulumi.IntOutput)
}

// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
func (o ChallengeOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Challenge) pulumi.IntPtrOutput { return v.Minimum }).(pulumi.IntPtrOutput)
}

// Name of the file as displayed to end-users.
func (o ChallengeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Suggestion for the end-user as next challenge to work on.
func (o ChallengeOutput) Next() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Challenge) pulumi.IntPtrOutput { return v.Next }).(pulumi.IntPtrOutput)
}

// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
func (o ChallengeOutput) Requirements() ChallengeRequirementsPtrOutput {
	return o.ApplyT(func(v *Challenge) ChallengeRequirementsPtrOutput { return v.Requirements }).(ChallengeRequirementsPtrOutput)
}

// State of the challenge, either hidden or visible.
func (o ChallengeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
func (o ChallengeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of challenge topics that are displayed to the administrators for maintenance and planification.
func (o ChallengeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringArrayOutput { return v.Topics }).(pulumi.StringArrayOutput)
}

// The type of the flag, could be either static or regex
func (o ChallengeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
func (o ChallengeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v *Challenge) pulumi.IntOutput { return v.Value }).(pulumi.IntOutput)
}

type ChallengeArrayOutput struct{ *pulumi.OutputState }

func (ChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Challenge)(nil)).Elem()
}

func (o ChallengeArrayOutput) ToChallengeArrayOutput() ChallengeArrayOutput {
	return o
}

func (o ChallengeArrayOutput) ToChallengeArrayOutputWithContext(ctx context.Context) ChallengeArrayOutput {
	return o
}

func (o ChallengeArrayOutput) Index(i pulumi.IntInput) ChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Challenge {
		return vs[0].([]*Challenge)[vs[1].(int)]
	}).(ChallengeOutput)
}

type ChallengeMapOutput struct{ *pulumi.OutputState }

func (ChallengeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Challenge)(nil)).Elem()
}

func (o ChallengeMapOutput) ToChallengeMapOutput() ChallengeMapOutput {
	return o
}

func (o ChallengeMapOutput) ToChallengeMapOutputWithContext(ctx context.Context) ChallengeMapOutput {
	return o
}

func (o ChallengeMapOutput) MapIndex(k pulumi.StringInput) ChallengeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Challenge {
		return vs[0].(map[string]*Challenge)[vs[1].(string)]
	}).(ChallengeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeInput)(nil)).Elem(), &Challenge{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeArrayInput)(nil)).Elem(), ChallengeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeMapInput)(nil)).Elem(), ChallengeMap{})
	pulumi.RegisterOutputType(ChallengeOutput{})
	pulumi.RegisterOutputType(ChallengeArrayOutput{})
	pulumi.RegisterOutputType(ChallengeMapOutput{})
}
