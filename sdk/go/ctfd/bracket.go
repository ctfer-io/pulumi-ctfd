// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A bracket for users or teams to compete in parallel.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			juniors, err := ctfd.NewBracket(ctx, "juniors", &ctfd.BracketArgs{
//				Description: pulumi.String("Bracket for 14-25 years old players."),
//				Type:        pulumi.String("users"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewUser(ctx, "player1", &ctfd.UserArgs{
//				Email:     pulumi.String("player1@ctfer.io"),
//				Password:  pulumi.String("password"),
//				BracketId: juniors.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Bracket struct {
	pulumi.CustomResourceState

	// Description that explains the goal of this bracket.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name displayed to end-users (e.g. "Students", "Interns", "Engineers").
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the bracket, either "users" or "teams".
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewBracket registers a new resource with the given unique name, arguments, and options.
func NewBracket(ctx *pulumi.Context,
	name string, args *BracketArgs, opts ...pulumi.ResourceOption) (*Bracket, error) {
	if args == nil {
		args = &BracketArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bracket
	err := ctx.RegisterResource("ctfd:index/bracket:Bracket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBracket gets an existing Bracket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBracket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BracketState, opts ...pulumi.ResourceOption) (*Bracket, error) {
	var resource Bracket
	err := ctx.ReadResource("ctfd:index/bracket:Bracket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bracket resources.
type bracketState struct {
	// Description that explains the goal of this bracket.
	Description *string `pulumi:"description"`
	// Name displayed to end-users (e.g. "Students", "Interns", "Engineers").
	Name *string `pulumi:"name"`
	// Type of the bracket, either "users" or "teams".
	Type *string `pulumi:"type"`
}

type BracketState struct {
	// Description that explains the goal of this bracket.
	Description pulumi.StringPtrInput
	// Name displayed to end-users (e.g. "Students", "Interns", "Engineers").
	Name pulumi.StringPtrInput
	// Type of the bracket, either "users" or "teams".
	Type pulumi.StringPtrInput
}

func (BracketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bracketState)(nil)).Elem()
}

type bracketArgs struct {
	// Description that explains the goal of this bracket.
	Description *string `pulumi:"description"`
	// Name displayed to end-users (e.g. "Students", "Interns", "Engineers").
	Name *string `pulumi:"name"`
	// Type of the bracket, either "users" or "teams".
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Bracket resource.
type BracketArgs struct {
	// Description that explains the goal of this bracket.
	Description pulumi.StringPtrInput
	// Name displayed to end-users (e.g. "Students", "Interns", "Engineers").
	Name pulumi.StringPtrInput
	// Type of the bracket, either "users" or "teams".
	Type pulumi.StringPtrInput
}

func (BracketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bracketArgs)(nil)).Elem()
}

type BracketInput interface {
	pulumi.Input

	ToBracketOutput() BracketOutput
	ToBracketOutputWithContext(ctx context.Context) BracketOutput
}

func (*Bracket) ElementType() reflect.Type {
	return reflect.TypeOf((**Bracket)(nil)).Elem()
}

func (i *Bracket) ToBracketOutput() BracketOutput {
	return i.ToBracketOutputWithContext(context.Background())
}

func (i *Bracket) ToBracketOutputWithContext(ctx context.Context) BracketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BracketOutput)
}

// BracketArrayInput is an input type that accepts BracketArray and BracketArrayOutput values.
// You can construct a concrete instance of `BracketArrayInput` via:
//
//	BracketArray{ BracketArgs{...} }
type BracketArrayInput interface {
	pulumi.Input

	ToBracketArrayOutput() BracketArrayOutput
	ToBracketArrayOutputWithContext(context.Context) BracketArrayOutput
}

type BracketArray []BracketInput

func (BracketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bracket)(nil)).Elem()
}

func (i BracketArray) ToBracketArrayOutput() BracketArrayOutput {
	return i.ToBracketArrayOutputWithContext(context.Background())
}

func (i BracketArray) ToBracketArrayOutputWithContext(ctx context.Context) BracketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BracketArrayOutput)
}

// BracketMapInput is an input type that accepts BracketMap and BracketMapOutput values.
// You can construct a concrete instance of `BracketMapInput` via:
//
//	BracketMap{ "key": BracketArgs{...} }
type BracketMapInput interface {
	pulumi.Input

	ToBracketMapOutput() BracketMapOutput
	ToBracketMapOutputWithContext(context.Context) BracketMapOutput
}

type BracketMap map[string]BracketInput

func (BracketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bracket)(nil)).Elem()
}

func (i BracketMap) ToBracketMapOutput() BracketMapOutput {
	return i.ToBracketMapOutputWithContext(context.Background())
}

func (i BracketMap) ToBracketMapOutputWithContext(ctx context.Context) BracketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BracketMapOutput)
}

type BracketOutput struct{ *pulumi.OutputState }

func (BracketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bracket)(nil)).Elem()
}

func (o BracketOutput) ToBracketOutput() BracketOutput {
	return o
}

func (o BracketOutput) ToBracketOutputWithContext(ctx context.Context) BracketOutput {
	return o
}

// Description that explains the goal of this bracket.
func (o BracketOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bracket) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name displayed to end-users (e.g. "Students", "Interns", "Engineers").
func (o BracketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bracket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the bracket, either "users" or "teams".
func (o BracketOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Bracket) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type BracketArrayOutput struct{ *pulumi.OutputState }

func (BracketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bracket)(nil)).Elem()
}

func (o BracketArrayOutput) ToBracketArrayOutput() BracketArrayOutput {
	return o
}

func (o BracketArrayOutput) ToBracketArrayOutputWithContext(ctx context.Context) BracketArrayOutput {
	return o
}

func (o BracketArrayOutput) Index(i pulumi.IntInput) BracketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bracket {
		return vs[0].([]*Bracket)[vs[1].(int)]
	}).(BracketOutput)
}

type BracketMapOutput struct{ *pulumi.OutputState }

func (BracketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bracket)(nil)).Elem()
}

func (o BracketMapOutput) ToBracketMapOutput() BracketMapOutput {
	return o
}

func (o BracketMapOutput) ToBracketMapOutputWithContext(ctx context.Context) BracketMapOutput {
	return o
}

func (o BracketMapOutput) MapIndex(k pulumi.StringInput) BracketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bracket {
		return vs[0].(map[string]*Bracket)[vs[1].(string)]
	}).(BracketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BracketInput)(nil)).Elem(), &Bracket{})
	pulumi.RegisterInputType(reflect.TypeOf((*BracketArrayInput)(nil)).Elem(), BracketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BracketMapInput)(nil)).Elem(), BracketMap{})
	pulumi.RegisterOutputType(BracketOutput{})
	pulumi.RegisterOutputType(BracketArrayOutput{})
	pulumi.RegisterOutputType(BracketMapOutput{})
}
