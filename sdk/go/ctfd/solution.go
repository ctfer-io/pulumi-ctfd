// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The solution to a challenge.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := ctfd.NewChallengeStandard(ctx, "example", &ctfd.ChallengeStandardArgs{
//				Category:    pulumi.String("test"),
//				Description: pulumi.String("Example challenge description..."),
//				Value:       pulumi.Int(500),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewSolution(ctx, "wu", &ctfd.SolutionArgs{
//				ChallengeId: example.ID(),
//				Content:     pulumi.String("Here is how to solve the challenge: ..."),
//				State:       pulumi.String("visible"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Solution struct {
	pulumi.CustomResourceState

	// Challenge of the solution.
	ChallengeId pulumi.StringOutput `pulumi:"challengeId"`
	// The solution to the challenge, in markdown.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// State of the solution, either hidden or visible.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewSolution registers a new resource with the given unique name, arguments, and options.
func NewSolution(ctx *pulumi.Context,
	name string, args *SolutionArgs, opts ...pulumi.ResourceOption) (*Solution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChallengeId == nil {
		return nil, errors.New("invalid value for required argument 'ChallengeId'")
	}
	if args.Content != nil {
		args.Content = pulumi.ToSecret(args.Content).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"content",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Solution
	err := ctx.RegisterResource("ctfd:index/solution:Solution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolution gets an existing Solution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionState, opts ...pulumi.ResourceOption) (*Solution, error) {
	var resource Solution
	err := ctx.ReadResource("ctfd:index/solution:Solution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Solution resources.
type solutionState struct {
	// Challenge of the solution.
	ChallengeId *string `pulumi:"challengeId"`
	// The solution to the challenge, in markdown.
	Content *string `pulumi:"content"`
	// State of the solution, either hidden or visible.
	State *string `pulumi:"state"`
}

type SolutionState struct {
	// Challenge of the solution.
	ChallengeId pulumi.StringPtrInput
	// The solution to the challenge, in markdown.
	Content pulumi.StringPtrInput
	// State of the solution, either hidden or visible.
	State pulumi.StringPtrInput
}

func (SolutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionState)(nil)).Elem()
}

type solutionArgs struct {
	// Challenge of the solution.
	ChallengeId string `pulumi:"challengeId"`
	// The solution to the challenge, in markdown.
	Content *string `pulumi:"content"`
	// State of the solution, either hidden or visible.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a Solution resource.
type SolutionArgs struct {
	// Challenge of the solution.
	ChallengeId pulumi.StringInput
	// The solution to the challenge, in markdown.
	Content pulumi.StringPtrInput
	// State of the solution, either hidden or visible.
	State pulumi.StringPtrInput
}

func (SolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionArgs)(nil)).Elem()
}

type SolutionInput interface {
	pulumi.Input

	ToSolutionOutput() SolutionOutput
	ToSolutionOutputWithContext(ctx context.Context) SolutionOutput
}

func (*Solution) ElementType() reflect.Type {
	return reflect.TypeOf((**Solution)(nil)).Elem()
}

func (i *Solution) ToSolutionOutput() SolutionOutput {
	return i.ToSolutionOutputWithContext(context.Background())
}

func (i *Solution) ToSolutionOutputWithContext(ctx context.Context) SolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionOutput)
}

// SolutionArrayInput is an input type that accepts SolutionArray and SolutionArrayOutput values.
// You can construct a concrete instance of `SolutionArrayInput` via:
//
//	SolutionArray{ SolutionArgs{...} }
type SolutionArrayInput interface {
	pulumi.Input

	ToSolutionArrayOutput() SolutionArrayOutput
	ToSolutionArrayOutputWithContext(context.Context) SolutionArrayOutput
}

type SolutionArray []SolutionInput

func (SolutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Solution)(nil)).Elem()
}

func (i SolutionArray) ToSolutionArrayOutput() SolutionArrayOutput {
	return i.ToSolutionArrayOutputWithContext(context.Background())
}

func (i SolutionArray) ToSolutionArrayOutputWithContext(ctx context.Context) SolutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionArrayOutput)
}

// SolutionMapInput is an input type that accepts SolutionMap and SolutionMapOutput values.
// You can construct a concrete instance of `SolutionMapInput` via:
//
//	SolutionMap{ "key": SolutionArgs{...} }
type SolutionMapInput interface {
	pulumi.Input

	ToSolutionMapOutput() SolutionMapOutput
	ToSolutionMapOutputWithContext(context.Context) SolutionMapOutput
}

type SolutionMap map[string]SolutionInput

func (SolutionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Solution)(nil)).Elem()
}

func (i SolutionMap) ToSolutionMapOutput() SolutionMapOutput {
	return i.ToSolutionMapOutputWithContext(context.Background())
}

func (i SolutionMap) ToSolutionMapOutputWithContext(ctx context.Context) SolutionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionMapOutput)
}

type SolutionOutput struct{ *pulumi.OutputState }

func (SolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Solution)(nil)).Elem()
}

func (o SolutionOutput) ToSolutionOutput() SolutionOutput {
	return o
}

func (o SolutionOutput) ToSolutionOutputWithContext(ctx context.Context) SolutionOutput {
	return o
}

// Challenge of the solution.
func (o SolutionOutput) ChallengeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Solution) pulumi.StringOutput { return v.ChallengeId }).(pulumi.StringOutput)
}

// The solution to the challenge, in markdown.
func (o SolutionOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Solution) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// State of the solution, either hidden or visible.
func (o SolutionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Solution) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type SolutionArrayOutput struct{ *pulumi.OutputState }

func (SolutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Solution)(nil)).Elem()
}

func (o SolutionArrayOutput) ToSolutionArrayOutput() SolutionArrayOutput {
	return o
}

func (o SolutionArrayOutput) ToSolutionArrayOutputWithContext(ctx context.Context) SolutionArrayOutput {
	return o
}

func (o SolutionArrayOutput) Index(i pulumi.IntInput) SolutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Solution {
		return vs[0].([]*Solution)[vs[1].(int)]
	}).(SolutionOutput)
}

type SolutionMapOutput struct{ *pulumi.OutputState }

func (SolutionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Solution)(nil)).Elem()
}

func (o SolutionMapOutput) ToSolutionMapOutput() SolutionMapOutput {
	return o
}

func (o SolutionMapOutput) ToSolutionMapOutputWithContext(ctx context.Context) SolutionMapOutput {
	return o
}

func (o SolutionMapOutput) MapIndex(k pulumi.StringInput) SolutionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Solution {
		return vs[0].(map[string]*Solution)[vs[1].(string)]
	}).(SolutionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionInput)(nil)).Elem(), &Solution{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionArrayInput)(nil)).Elem(), SolutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolutionMapInput)(nil)).Elem(), SolutionMap{})
	pulumi.RegisterOutputType(SolutionOutput{})
	pulumi.RegisterOutputType(SolutionArrayOutput{})
	pulumi.RegisterOutputType(SolutionMapOutput{})
}
