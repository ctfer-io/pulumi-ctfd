// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"errors"
	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A hint for a challenge to help players solve it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			http, err := ctfd.NewChallengeDynamic(ctx, "http", &ctfd.ChallengeDynamicArgs{
//				Category:    pulumi.String("misc"),
//				Description: pulumi.String("..."),
//				Value:       pulumi.Int(500),
//				Decay:       pulumi.Int(100),
//				Minimum:     pulumi.Int(50),
//				State:       pulumi.String("visible"),
//				Function:    pulumi.String("logarithmic"),
//				Topics: pulumi.StringArray{
//					pulumi.String("Misc"),
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("misc"),
//					pulumi.String("basic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewFlag(ctx, "httpFlag", &ctfd.FlagArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("CTF{some_flag}"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewHint(ctx, "httpHint", &ctfd.HintArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("Some super-helpful hint"),
//				Cost:        pulumi.Int(50),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ctfd.NewHint(ctx, "httpHint2", &ctfd.HintArgs{
//				ChallengeId: http.ID(),
//				Content:     pulumi.String("Even more helpful hint !"),
//				Cost:        pulumi.Int(50),
//				Requirements: pulumi.StringArray{
//					ctfd_hint.Http_hint_1.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Hint struct {
	pulumi.CustomResourceState

	// Challenge of the hint.
	ChallengeId pulumi.StringOutput `pulumi:"challengeId"`
	// Content of the hint as displayed to the end-user.
	Content pulumi.StringOutput `pulumi:"content"`
	// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
	Cost pulumi.IntOutput `pulumi:"cost"`
	// List of the other hints it depends on.
	Requirements pulumi.StringArrayOutput `pulumi:"requirements"`
}

// NewHint registers a new resource with the given unique name, arguments, and options.
func NewHint(ctx *pulumi.Context,
	name string, args *HintArgs, opts ...pulumi.ResourceOption) (*Hint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChallengeId == nil {
		return nil, errors.New("invalid value for required argument 'ChallengeId'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hint
	err := ctx.RegisterResource("ctfd:index/hint:Hint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHint gets an existing Hint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HintState, opts ...pulumi.ResourceOption) (*Hint, error) {
	var resource Hint
	err := ctx.ReadResource("ctfd:index/hint:Hint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hint resources.
type hintState struct {
	// Challenge of the hint.
	ChallengeId *string `pulumi:"challengeId"`
	// Content of the hint as displayed to the end-user.
	Content *string `pulumi:"content"`
	// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
	Cost *int `pulumi:"cost"`
	// List of the other hints it depends on.
	Requirements []string `pulumi:"requirements"`
}

type HintState struct {
	// Challenge of the hint.
	ChallengeId pulumi.StringPtrInput
	// Content of the hint as displayed to the end-user.
	Content pulumi.StringPtrInput
	// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
	Cost pulumi.IntPtrInput
	// List of the other hints it depends on.
	Requirements pulumi.StringArrayInput
}

func (HintState) ElementType() reflect.Type {
	return reflect.TypeOf((*hintState)(nil)).Elem()
}

type hintArgs struct {
	// Challenge of the hint.
	ChallengeId string `pulumi:"challengeId"`
	// Content of the hint as displayed to the end-user.
	Content string `pulumi:"content"`
	// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
	Cost *int `pulumi:"cost"`
	// List of the other hints it depends on.
	Requirements []string `pulumi:"requirements"`
}

// The set of arguments for constructing a Hint resource.
type HintArgs struct {
	// Challenge of the hint.
	ChallengeId pulumi.StringInput
	// Content of the hint as displayed to the end-user.
	Content pulumi.StringInput
	// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
	Cost pulumi.IntPtrInput
	// List of the other hints it depends on.
	Requirements pulumi.StringArrayInput
}

func (HintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hintArgs)(nil)).Elem()
}

type HintInput interface {
	pulumi.Input

	ToHintOutput() HintOutput
	ToHintOutputWithContext(ctx context.Context) HintOutput
}

func (*Hint) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (i *Hint) ToHintOutput() HintOutput {
	return i.ToHintOutputWithContext(context.Background())
}

func (i *Hint) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintOutput)
}

// HintArrayInput is an input type that accepts HintArray and HintArrayOutput values.
// You can construct a concrete instance of `HintArrayInput` via:
//
//	HintArray{ HintArgs{...} }
type HintArrayInput interface {
	pulumi.Input

	ToHintArrayOutput() HintArrayOutput
	ToHintArrayOutputWithContext(context.Context) HintArrayOutput
}

type HintArray []HintInput

func (HintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hint)(nil)).Elem()
}

func (i HintArray) ToHintArrayOutput() HintArrayOutput {
	return i.ToHintArrayOutputWithContext(context.Background())
}

func (i HintArray) ToHintArrayOutputWithContext(ctx context.Context) HintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintArrayOutput)
}

// HintMapInput is an input type that accepts HintMap and HintMapOutput values.
// You can construct a concrete instance of `HintMapInput` via:
//
//	HintMap{ "key": HintArgs{...} }
type HintMapInput interface {
	pulumi.Input

	ToHintMapOutput() HintMapOutput
	ToHintMapOutputWithContext(context.Context) HintMapOutput
}

type HintMap map[string]HintInput

func (HintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hint)(nil)).Elem()
}

func (i HintMap) ToHintMapOutput() HintMapOutput {
	return i.ToHintMapOutputWithContext(context.Background())
}

func (i HintMap) ToHintMapOutputWithContext(ctx context.Context) HintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HintMapOutput)
}

type HintOutput struct{ *pulumi.OutputState }

func (HintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hint)(nil)).Elem()
}

func (o HintOutput) ToHintOutput() HintOutput {
	return o
}

func (o HintOutput) ToHintOutputWithContext(ctx context.Context) HintOutput {
	return o
}

// Challenge of the hint.
func (o HintOutput) ChallengeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Hint) pulumi.StringOutput { return v.ChallengeId }).(pulumi.StringOutput)
}

// Content of the hint as displayed to the end-user.
func (o HintOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Hint) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
func (o HintOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v *Hint) pulumi.IntOutput { return v.Cost }).(pulumi.IntOutput)
}

// List of the other hints it depends on.
func (o HintOutput) Requirements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hint) pulumi.StringArrayOutput { return v.Requirements }).(pulumi.StringArrayOutput)
}

type HintArrayOutput struct{ *pulumi.OutputState }

func (HintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hint)(nil)).Elem()
}

func (o HintArrayOutput) ToHintArrayOutput() HintArrayOutput {
	return o
}

func (o HintArrayOutput) ToHintArrayOutputWithContext(ctx context.Context) HintArrayOutput {
	return o
}

func (o HintArrayOutput) Index(i pulumi.IntInput) HintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hint {
		return vs[0].([]*Hint)[vs[1].(int)]
	}).(HintOutput)
}

type HintMapOutput struct{ *pulumi.OutputState }

func (HintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hint)(nil)).Elem()
}

func (o HintMapOutput) ToHintMapOutput() HintMapOutput {
	return o
}

func (o HintMapOutput) ToHintMapOutputWithContext(ctx context.Context) HintMapOutput {
	return o
}

func (o HintMapOutput) MapIndex(k pulumi.StringInput) HintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hint {
		return vs[0].(map[string]*Hint)[vs[1].(string)]
	}).(HintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HintInput)(nil)).Elem(), &Hint{})
	pulumi.RegisterInputType(reflect.TypeOf((*HintArrayInput)(nil)).Elem(), HintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HintMapInput)(nil)).Elem(), HintMap{})
	pulumi.RegisterOutputType(HintOutput{})
	pulumi.RegisterOutputType(HintArrayOutput{})
	pulumi.RegisterOutputType(HintMapOutput{})
}
