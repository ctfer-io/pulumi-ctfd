// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"github.com/ctfer-io/pulumi-ctfd/sdk/v2/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ChallengeDynamicRequirements struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior *string `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites []string `pulumi:"prerequisites"`
}

// ChallengeDynamicRequirementsInput is an input type that accepts ChallengeDynamicRequirementsArgs and ChallengeDynamicRequirementsOutput values.
// You can construct a concrete instance of `ChallengeDynamicRequirementsInput` via:
//
//	ChallengeDynamicRequirementsArgs{...}
type ChallengeDynamicRequirementsInput interface {
	pulumi.Input

	ToChallengeDynamicRequirementsOutput() ChallengeDynamicRequirementsOutput
	ToChallengeDynamicRequirementsOutputWithContext(context.Context) ChallengeDynamicRequirementsOutput
}

type ChallengeDynamicRequirementsArgs struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior pulumi.StringPtrInput `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites pulumi.StringArrayInput `pulumi:"prerequisites"`
}

func (ChallengeDynamicRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeDynamicRequirements)(nil)).Elem()
}

func (i ChallengeDynamicRequirementsArgs) ToChallengeDynamicRequirementsOutput() ChallengeDynamicRequirementsOutput {
	return i.ToChallengeDynamicRequirementsOutputWithContext(context.Background())
}

func (i ChallengeDynamicRequirementsArgs) ToChallengeDynamicRequirementsOutputWithContext(ctx context.Context) ChallengeDynamicRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicRequirementsOutput)
}

func (i ChallengeDynamicRequirementsArgs) ToChallengeDynamicRequirementsPtrOutput() ChallengeDynamicRequirementsPtrOutput {
	return i.ToChallengeDynamicRequirementsPtrOutputWithContext(context.Background())
}

func (i ChallengeDynamicRequirementsArgs) ToChallengeDynamicRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicRequirementsOutput).ToChallengeDynamicRequirementsPtrOutputWithContext(ctx)
}

// ChallengeDynamicRequirementsPtrInput is an input type that accepts ChallengeDynamicRequirementsArgs, ChallengeDynamicRequirementsPtr and ChallengeDynamicRequirementsPtrOutput values.
// You can construct a concrete instance of `ChallengeDynamicRequirementsPtrInput` via:
//
//	        ChallengeDynamicRequirementsArgs{...}
//
//	or:
//
//	        nil
type ChallengeDynamicRequirementsPtrInput interface {
	pulumi.Input

	ToChallengeDynamicRequirementsPtrOutput() ChallengeDynamicRequirementsPtrOutput
	ToChallengeDynamicRequirementsPtrOutputWithContext(context.Context) ChallengeDynamicRequirementsPtrOutput
}

type challengeDynamicRequirementsPtrType ChallengeDynamicRequirementsArgs

func ChallengeDynamicRequirementsPtr(v *ChallengeDynamicRequirementsArgs) ChallengeDynamicRequirementsPtrInput {
	return (*challengeDynamicRequirementsPtrType)(v)
}

func (*challengeDynamicRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamicRequirements)(nil)).Elem()
}

func (i *challengeDynamicRequirementsPtrType) ToChallengeDynamicRequirementsPtrOutput() ChallengeDynamicRequirementsPtrOutput {
	return i.ToChallengeDynamicRequirementsPtrOutputWithContext(context.Background())
}

func (i *challengeDynamicRequirementsPtrType) ToChallengeDynamicRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeDynamicRequirementsPtrOutput)
}

type ChallengeDynamicRequirementsOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeDynamicRequirements)(nil)).Elem()
}

func (o ChallengeDynamicRequirementsOutput) ToChallengeDynamicRequirementsOutput() ChallengeDynamicRequirementsOutput {
	return o
}

func (o ChallengeDynamicRequirementsOutput) ToChallengeDynamicRequirementsOutputWithContext(ctx context.Context) ChallengeDynamicRequirementsOutput {
	return o
}

func (o ChallengeDynamicRequirementsOutput) ToChallengeDynamicRequirementsPtrOutput() ChallengeDynamicRequirementsPtrOutput {
	return o.ToChallengeDynamicRequirementsPtrOutputWithContext(context.Background())
}

func (o ChallengeDynamicRequirementsOutput) ToChallengeDynamicRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChallengeDynamicRequirements) *ChallengeDynamicRequirements {
		return &v
	}).(ChallengeDynamicRequirementsPtrOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeDynamicRequirementsOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeDynamicRequirements) *string { return v.Behavior }).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeDynamicRequirementsOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChallengeDynamicRequirements) []string { return v.Prerequisites }).(pulumi.StringArrayOutput)
}

type ChallengeDynamicRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ChallengeDynamicRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeDynamicRequirements)(nil)).Elem()
}

func (o ChallengeDynamicRequirementsPtrOutput) ToChallengeDynamicRequirementsPtrOutput() ChallengeDynamicRequirementsPtrOutput {
	return o
}

func (o ChallengeDynamicRequirementsPtrOutput) ToChallengeDynamicRequirementsPtrOutputWithContext(ctx context.Context) ChallengeDynamicRequirementsPtrOutput {
	return o
}

func (o ChallengeDynamicRequirementsPtrOutput) Elem() ChallengeDynamicRequirementsOutput {
	return o.ApplyT(func(v *ChallengeDynamicRequirements) ChallengeDynamicRequirements {
		if v != nil {
			return *v
		}
		var ret ChallengeDynamicRequirements
		return ret
	}).(ChallengeDynamicRequirementsOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeDynamicRequirementsPtrOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengeDynamicRequirements) *string {
		if v == nil {
			return nil
		}
		return v.Behavior
	}).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeDynamicRequirementsPtrOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeDynamicRequirements) []string {
		if v == nil {
			return nil
		}
		return v.Prerequisites
	}).(pulumi.StringArrayOutput)
}

type ChallengeStandardRequirements struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior *string `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites []string `pulumi:"prerequisites"`
}

// ChallengeStandardRequirementsInput is an input type that accepts ChallengeStandardRequirementsArgs and ChallengeStandardRequirementsOutput values.
// You can construct a concrete instance of `ChallengeStandardRequirementsInput` via:
//
//	ChallengeStandardRequirementsArgs{...}
type ChallengeStandardRequirementsInput interface {
	pulumi.Input

	ToChallengeStandardRequirementsOutput() ChallengeStandardRequirementsOutput
	ToChallengeStandardRequirementsOutputWithContext(context.Context) ChallengeStandardRequirementsOutput
}

type ChallengeStandardRequirementsArgs struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior pulumi.StringPtrInput `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites pulumi.StringArrayInput `pulumi:"prerequisites"`
}

func (ChallengeStandardRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeStandardRequirements)(nil)).Elem()
}

func (i ChallengeStandardRequirementsArgs) ToChallengeStandardRequirementsOutput() ChallengeStandardRequirementsOutput {
	return i.ToChallengeStandardRequirementsOutputWithContext(context.Background())
}

func (i ChallengeStandardRequirementsArgs) ToChallengeStandardRequirementsOutputWithContext(ctx context.Context) ChallengeStandardRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeStandardRequirementsOutput)
}

func (i ChallengeStandardRequirementsArgs) ToChallengeStandardRequirementsPtrOutput() ChallengeStandardRequirementsPtrOutput {
	return i.ToChallengeStandardRequirementsPtrOutputWithContext(context.Background())
}

func (i ChallengeStandardRequirementsArgs) ToChallengeStandardRequirementsPtrOutputWithContext(ctx context.Context) ChallengeStandardRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeStandardRequirementsOutput).ToChallengeStandardRequirementsPtrOutputWithContext(ctx)
}

// ChallengeStandardRequirementsPtrInput is an input type that accepts ChallengeStandardRequirementsArgs, ChallengeStandardRequirementsPtr and ChallengeStandardRequirementsPtrOutput values.
// You can construct a concrete instance of `ChallengeStandardRequirementsPtrInput` via:
//
//	        ChallengeStandardRequirementsArgs{...}
//
//	or:
//
//	        nil
type ChallengeStandardRequirementsPtrInput interface {
	pulumi.Input

	ToChallengeStandardRequirementsPtrOutput() ChallengeStandardRequirementsPtrOutput
	ToChallengeStandardRequirementsPtrOutputWithContext(context.Context) ChallengeStandardRequirementsPtrOutput
}

type challengeStandardRequirementsPtrType ChallengeStandardRequirementsArgs

func ChallengeStandardRequirementsPtr(v *ChallengeStandardRequirementsArgs) ChallengeStandardRequirementsPtrInput {
	return (*challengeStandardRequirementsPtrType)(v)
}

func (*challengeStandardRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeStandardRequirements)(nil)).Elem()
}

func (i *challengeStandardRequirementsPtrType) ToChallengeStandardRequirementsPtrOutput() ChallengeStandardRequirementsPtrOutput {
	return i.ToChallengeStandardRequirementsPtrOutputWithContext(context.Background())
}

func (i *challengeStandardRequirementsPtrType) ToChallengeStandardRequirementsPtrOutputWithContext(ctx context.Context) ChallengeStandardRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeStandardRequirementsPtrOutput)
}

type ChallengeStandardRequirementsOutput struct{ *pulumi.OutputState }

func (ChallengeStandardRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeStandardRequirements)(nil)).Elem()
}

func (o ChallengeStandardRequirementsOutput) ToChallengeStandardRequirementsOutput() ChallengeStandardRequirementsOutput {
	return o
}

func (o ChallengeStandardRequirementsOutput) ToChallengeStandardRequirementsOutputWithContext(ctx context.Context) ChallengeStandardRequirementsOutput {
	return o
}

func (o ChallengeStandardRequirementsOutput) ToChallengeStandardRequirementsPtrOutput() ChallengeStandardRequirementsPtrOutput {
	return o.ToChallengeStandardRequirementsPtrOutputWithContext(context.Background())
}

func (o ChallengeStandardRequirementsOutput) ToChallengeStandardRequirementsPtrOutputWithContext(ctx context.Context) ChallengeStandardRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChallengeStandardRequirements) *ChallengeStandardRequirements {
		return &v
	}).(ChallengeStandardRequirementsPtrOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeStandardRequirementsOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeStandardRequirements) *string { return v.Behavior }).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeStandardRequirementsOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChallengeStandardRequirements) []string { return v.Prerequisites }).(pulumi.StringArrayOutput)
}

type ChallengeStandardRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ChallengeStandardRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeStandardRequirements)(nil)).Elem()
}

func (o ChallengeStandardRequirementsPtrOutput) ToChallengeStandardRequirementsPtrOutput() ChallengeStandardRequirementsPtrOutput {
	return o
}

func (o ChallengeStandardRequirementsPtrOutput) ToChallengeStandardRequirementsPtrOutputWithContext(ctx context.Context) ChallengeStandardRequirementsPtrOutput {
	return o
}

func (o ChallengeStandardRequirementsPtrOutput) Elem() ChallengeStandardRequirementsOutput {
	return o.ApplyT(func(v *ChallengeStandardRequirements) ChallengeStandardRequirements {
		if v != nil {
			return *v
		}
		var ret ChallengeStandardRequirements
		return ret
	}).(ChallengeStandardRequirementsOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeStandardRequirementsPtrOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengeStandardRequirements) *string {
		if v == nil {
			return nil
		}
		return v.Behavior
	}).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeStandardRequirementsPtrOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeStandardRequirements) []string {
		if v == nil {
			return nil
		}
		return v.Prerequisites
	}).(pulumi.StringArrayOutput)
}

type GetChallengesDynamicChallenge struct {
	// Attribution to the creator(s) of the challenge.
	Attribution string `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
	ConnectionInfo string `pulumi:"connectionInfo"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description string `pulumi:"description"`
	// Identifier of the challenge.
	Id string `pulumi:"id"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts int `pulumi:"maxAttempts"`
	// Name of the challenge, displayed as it.
	Name string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next int `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements GetChallengesDynamicChallengeRequirements `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	Value  int      `pulumi:"value"`
}

// GetChallengesDynamicChallengeInput is an input type that accepts GetChallengesDynamicChallengeArgs and GetChallengesDynamicChallengeOutput values.
// You can construct a concrete instance of `GetChallengesDynamicChallengeInput` via:
//
//	GetChallengesDynamicChallengeArgs{...}
type GetChallengesDynamicChallengeInput interface {
	pulumi.Input

	ToGetChallengesDynamicChallengeOutput() GetChallengesDynamicChallengeOutput
	ToGetChallengesDynamicChallengeOutputWithContext(context.Context) GetChallengesDynamicChallengeOutput
}

type GetChallengesDynamicChallengeArgs struct {
	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringInput `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringInput `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
	ConnectionInfo pulumi.StringInput `pulumi:"connectionInfo"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringInput `pulumi:"description"`
	// Identifier of the challenge.
	Id pulumi.StringInput `pulumi:"id"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntInput `pulumi:"maxAttempts"`
	// Name of the challenge, displayed as it.
	Name pulumi.StringInput `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntInput `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements GetChallengesDynamicChallengeRequirementsInput `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State pulumi.StringInput `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
	Value  pulumi.IntInput         `pulumi:"value"`
}

func (GetChallengesDynamicChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesDynamicChallenge)(nil)).Elem()
}

func (i GetChallengesDynamicChallengeArgs) ToGetChallengesDynamicChallengeOutput() GetChallengesDynamicChallengeOutput {
	return i.ToGetChallengesDynamicChallengeOutputWithContext(context.Background())
}

func (i GetChallengesDynamicChallengeArgs) ToGetChallengesDynamicChallengeOutputWithContext(ctx context.Context) GetChallengesDynamicChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesDynamicChallengeOutput)
}

// GetChallengesDynamicChallengeArrayInput is an input type that accepts GetChallengesDynamicChallengeArray and GetChallengesDynamicChallengeArrayOutput values.
// You can construct a concrete instance of `GetChallengesDynamicChallengeArrayInput` via:
//
//	GetChallengesDynamicChallengeArray{ GetChallengesDynamicChallengeArgs{...} }
type GetChallengesDynamicChallengeArrayInput interface {
	pulumi.Input

	ToGetChallengesDynamicChallengeArrayOutput() GetChallengesDynamicChallengeArrayOutput
	ToGetChallengesDynamicChallengeArrayOutputWithContext(context.Context) GetChallengesDynamicChallengeArrayOutput
}

type GetChallengesDynamicChallengeArray []GetChallengesDynamicChallengeInput

func (GetChallengesDynamicChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesDynamicChallenge)(nil)).Elem()
}

func (i GetChallengesDynamicChallengeArray) ToGetChallengesDynamicChallengeArrayOutput() GetChallengesDynamicChallengeArrayOutput {
	return i.ToGetChallengesDynamicChallengeArrayOutputWithContext(context.Background())
}

func (i GetChallengesDynamicChallengeArray) ToGetChallengesDynamicChallengeArrayOutputWithContext(ctx context.Context) GetChallengesDynamicChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesDynamicChallengeArrayOutput)
}

type GetChallengesDynamicChallengeOutput struct{ *pulumi.OutputState }

func (GetChallengesDynamicChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesDynamicChallenge)(nil)).Elem()
}

func (o GetChallengesDynamicChallengeOutput) ToGetChallengesDynamicChallengeOutput() GetChallengesDynamicChallengeOutput {
	return o
}

func (o GetChallengesDynamicChallengeOutput) ToGetChallengesDynamicChallengeOutputWithContext(ctx context.Context) GetChallengesDynamicChallengeOutput {
	return o
}

// Attribution to the creator(s) of the challenge.
func (o GetChallengesDynamicChallengeOutput) Attribution() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) string { return v.Attribution }).(pulumi.StringOutput)
}

// Category of the challenge that CTFd groups by on the web UI.
func (o GetChallengesDynamicChallengeOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) string { return v.Category }).(pulumi.StringOutput)
}

// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
func (o GetChallengesDynamicChallengeOutput) ConnectionInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) string { return v.ConnectionInfo }).(pulumi.StringOutput)
}

// Description of the challenge, consider using multiline descriptions for better style.
func (o GetChallengesDynamicChallengeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) string { return v.Description }).(pulumi.StringOutput)
}

// Identifier of the challenge.
func (o GetChallengesDynamicChallengeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) string { return v.Id }).(pulumi.StringOutput)
}

// Maximum amount of attempts before being unable to flag the challenge.
func (o GetChallengesDynamicChallengeOutput) MaxAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) int { return v.MaxAttempts }).(pulumi.IntOutput)
}

// Name of the challenge, displayed as it.
func (o GetChallengesDynamicChallengeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) string { return v.Name }).(pulumi.StringOutput)
}

// Suggestion for the end-user as next challenge to work on.
func (o GetChallengesDynamicChallengeOutput) Next() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) int { return v.Next }).(pulumi.IntOutput)
}

// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
func (o GetChallengesDynamicChallengeOutput) Requirements() GetChallengesDynamicChallengeRequirementsOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) GetChallengesDynamicChallengeRequirements { return v.Requirements }).(GetChallengesDynamicChallengeRequirementsOutput)
}

// State of the challenge, either hidden or visible.
func (o GetChallengesDynamicChallengeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) string { return v.State }).(pulumi.StringOutput)
}

// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
func (o GetChallengesDynamicChallengeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of challenge topics that are displayed to the administrators for maintenance and planification.
func (o GetChallengesDynamicChallengeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

func (o GetChallengesDynamicChallengeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallenge) int { return v.Value }).(pulumi.IntOutput)
}

type GetChallengesDynamicChallengeArrayOutput struct{ *pulumi.OutputState }

func (GetChallengesDynamicChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesDynamicChallenge)(nil)).Elem()
}

func (o GetChallengesDynamicChallengeArrayOutput) ToGetChallengesDynamicChallengeArrayOutput() GetChallengesDynamicChallengeArrayOutput {
	return o
}

func (o GetChallengesDynamicChallengeArrayOutput) ToGetChallengesDynamicChallengeArrayOutputWithContext(ctx context.Context) GetChallengesDynamicChallengeArrayOutput {
	return o
}

func (o GetChallengesDynamicChallengeArrayOutput) Index(i pulumi.IntInput) GetChallengesDynamicChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChallengesDynamicChallenge {
		return vs[0].([]GetChallengesDynamicChallenge)[vs[1].(int)]
	}).(GetChallengesDynamicChallengeOutput)
}

type GetChallengesDynamicChallengeRequirements struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior string `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites []string `pulumi:"prerequisites"`
}

// GetChallengesDynamicChallengeRequirementsInput is an input type that accepts GetChallengesDynamicChallengeRequirementsArgs and GetChallengesDynamicChallengeRequirementsOutput values.
// You can construct a concrete instance of `GetChallengesDynamicChallengeRequirementsInput` via:
//
//	GetChallengesDynamicChallengeRequirementsArgs{...}
type GetChallengesDynamicChallengeRequirementsInput interface {
	pulumi.Input

	ToGetChallengesDynamicChallengeRequirementsOutput() GetChallengesDynamicChallengeRequirementsOutput
	ToGetChallengesDynamicChallengeRequirementsOutputWithContext(context.Context) GetChallengesDynamicChallengeRequirementsOutput
}

type GetChallengesDynamicChallengeRequirementsArgs struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior pulumi.StringInput `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites pulumi.StringArrayInput `pulumi:"prerequisites"`
}

func (GetChallengesDynamicChallengeRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesDynamicChallengeRequirements)(nil)).Elem()
}

func (i GetChallengesDynamicChallengeRequirementsArgs) ToGetChallengesDynamicChallengeRequirementsOutput() GetChallengesDynamicChallengeRequirementsOutput {
	return i.ToGetChallengesDynamicChallengeRequirementsOutputWithContext(context.Background())
}

func (i GetChallengesDynamicChallengeRequirementsArgs) ToGetChallengesDynamicChallengeRequirementsOutputWithContext(ctx context.Context) GetChallengesDynamicChallengeRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesDynamicChallengeRequirementsOutput)
}

type GetChallengesDynamicChallengeRequirementsOutput struct{ *pulumi.OutputState }

func (GetChallengesDynamicChallengeRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesDynamicChallengeRequirements)(nil)).Elem()
}

func (o GetChallengesDynamicChallengeRequirementsOutput) ToGetChallengesDynamicChallengeRequirementsOutput() GetChallengesDynamicChallengeRequirementsOutput {
	return o
}

func (o GetChallengesDynamicChallengeRequirementsOutput) ToGetChallengesDynamicChallengeRequirementsOutputWithContext(ctx context.Context) GetChallengesDynamicChallengeRequirementsOutput {
	return o
}

// Behavior if not unlocked, either hidden or anonymized.
func (o GetChallengesDynamicChallengeRequirementsOutput) Behavior() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallengeRequirements) string { return v.Behavior }).(pulumi.StringOutput)
}

// List of the challenges ID.
func (o GetChallengesDynamicChallengeRequirementsOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesDynamicChallengeRequirements) []string { return v.Prerequisites }).(pulumi.StringArrayOutput)
}

type GetChallengesStandardChallenge struct {
	// Attribution to the creator(s) of the challenge.
	Attribution string `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
	ConnectionInfo string `pulumi:"connectionInfo"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description string `pulumi:"description"`
	// Identifier of the challenge.
	Id string `pulumi:"id"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts int `pulumi:"maxAttempts"`
	// Name of the challenge, displayed as it.
	Name string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next int `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements GetChallengesStandardChallengeRequirements `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	Value  int      `pulumi:"value"`
}

// GetChallengesStandardChallengeInput is an input type that accepts GetChallengesStandardChallengeArgs and GetChallengesStandardChallengeOutput values.
// You can construct a concrete instance of `GetChallengesStandardChallengeInput` via:
//
//	GetChallengesStandardChallengeArgs{...}
type GetChallengesStandardChallengeInput interface {
	pulumi.Input

	ToGetChallengesStandardChallengeOutput() GetChallengesStandardChallengeOutput
	ToGetChallengesStandardChallengeOutputWithContext(context.Context) GetChallengesStandardChallengeOutput
}

type GetChallengesStandardChallengeArgs struct {
	// Attribution to the creator(s) of the challenge.
	Attribution pulumi.StringInput `pulumi:"attribution"`
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringInput `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
	ConnectionInfo pulumi.StringInput `pulumi:"connectionInfo"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringInput `pulumi:"description"`
	// Identifier of the challenge.
	Id pulumi.StringInput `pulumi:"id"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntInput `pulumi:"maxAttempts"`
	// Name of the challenge, displayed as it.
	Name pulumi.StringInput `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntInput `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements GetChallengesStandardChallengeRequirementsInput `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State pulumi.StringInput `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
	Value  pulumi.IntInput         `pulumi:"value"`
}

func (GetChallengesStandardChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesStandardChallenge)(nil)).Elem()
}

func (i GetChallengesStandardChallengeArgs) ToGetChallengesStandardChallengeOutput() GetChallengesStandardChallengeOutput {
	return i.ToGetChallengesStandardChallengeOutputWithContext(context.Background())
}

func (i GetChallengesStandardChallengeArgs) ToGetChallengesStandardChallengeOutputWithContext(ctx context.Context) GetChallengesStandardChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesStandardChallengeOutput)
}

// GetChallengesStandardChallengeArrayInput is an input type that accepts GetChallengesStandardChallengeArray and GetChallengesStandardChallengeArrayOutput values.
// You can construct a concrete instance of `GetChallengesStandardChallengeArrayInput` via:
//
//	GetChallengesStandardChallengeArray{ GetChallengesStandardChallengeArgs{...} }
type GetChallengesStandardChallengeArrayInput interface {
	pulumi.Input

	ToGetChallengesStandardChallengeArrayOutput() GetChallengesStandardChallengeArrayOutput
	ToGetChallengesStandardChallengeArrayOutputWithContext(context.Context) GetChallengesStandardChallengeArrayOutput
}

type GetChallengesStandardChallengeArray []GetChallengesStandardChallengeInput

func (GetChallengesStandardChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesStandardChallenge)(nil)).Elem()
}

func (i GetChallengesStandardChallengeArray) ToGetChallengesStandardChallengeArrayOutput() GetChallengesStandardChallengeArrayOutput {
	return i.ToGetChallengesStandardChallengeArrayOutputWithContext(context.Background())
}

func (i GetChallengesStandardChallengeArray) ToGetChallengesStandardChallengeArrayOutputWithContext(ctx context.Context) GetChallengesStandardChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesStandardChallengeArrayOutput)
}

type GetChallengesStandardChallengeOutput struct{ *pulumi.OutputState }

func (GetChallengesStandardChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesStandardChallenge)(nil)).Elem()
}

func (o GetChallengesStandardChallengeOutput) ToGetChallengesStandardChallengeOutput() GetChallengesStandardChallengeOutput {
	return o
}

func (o GetChallengesStandardChallengeOutput) ToGetChallengesStandardChallengeOutputWithContext(ctx context.Context) GetChallengesStandardChallengeOutput {
	return o
}

// Attribution to the creator(s) of the challenge.
func (o GetChallengesStandardChallengeOutput) Attribution() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) string { return v.Attribution }).(pulumi.StringOutput)
}

// Category of the challenge that CTFd groups by on the web UI.
func (o GetChallengesStandardChallengeOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) string { return v.Category }).(pulumi.StringOutput)
}

// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
func (o GetChallengesStandardChallengeOutput) ConnectionInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) string { return v.ConnectionInfo }).(pulumi.StringOutput)
}

// Description of the challenge, consider using multiline descriptions for better style.
func (o GetChallengesStandardChallengeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) string { return v.Description }).(pulumi.StringOutput)
}

// Identifier of the challenge.
func (o GetChallengesStandardChallengeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) string { return v.Id }).(pulumi.StringOutput)
}

// Maximum amount of attempts before being unable to flag the challenge.
func (o GetChallengesStandardChallengeOutput) MaxAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) int { return v.MaxAttempts }).(pulumi.IntOutput)
}

// Name of the challenge, displayed as it.
func (o GetChallengesStandardChallengeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) string { return v.Name }).(pulumi.StringOutput)
}

// Suggestion for the end-user as next challenge to work on.
func (o GetChallengesStandardChallengeOutput) Next() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) int { return v.Next }).(pulumi.IntOutput)
}

// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
func (o GetChallengesStandardChallengeOutput) Requirements() GetChallengesStandardChallengeRequirementsOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) GetChallengesStandardChallengeRequirements {
		return v.Requirements
	}).(GetChallengesStandardChallengeRequirementsOutput)
}

// State of the challenge, either hidden or visible.
func (o GetChallengesStandardChallengeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) string { return v.State }).(pulumi.StringOutput)
}

// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
func (o GetChallengesStandardChallengeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of challenge topics that are displayed to the administrators for maintenance and planification.
func (o GetChallengesStandardChallengeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

func (o GetChallengesStandardChallengeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesStandardChallenge) int { return v.Value }).(pulumi.IntOutput)
}

type GetChallengesStandardChallengeArrayOutput struct{ *pulumi.OutputState }

func (GetChallengesStandardChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesStandardChallenge)(nil)).Elem()
}

func (o GetChallengesStandardChallengeArrayOutput) ToGetChallengesStandardChallengeArrayOutput() GetChallengesStandardChallengeArrayOutput {
	return o
}

func (o GetChallengesStandardChallengeArrayOutput) ToGetChallengesStandardChallengeArrayOutputWithContext(ctx context.Context) GetChallengesStandardChallengeArrayOutput {
	return o
}

func (o GetChallengesStandardChallengeArrayOutput) Index(i pulumi.IntInput) GetChallengesStandardChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChallengesStandardChallenge {
		return vs[0].([]GetChallengesStandardChallenge)[vs[1].(int)]
	}).(GetChallengesStandardChallengeOutput)
}

type GetChallengesStandardChallengeRequirements struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior string `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites []string `pulumi:"prerequisites"`
}

// GetChallengesStandardChallengeRequirementsInput is an input type that accepts GetChallengesStandardChallengeRequirementsArgs and GetChallengesStandardChallengeRequirementsOutput values.
// You can construct a concrete instance of `GetChallengesStandardChallengeRequirementsInput` via:
//
//	GetChallengesStandardChallengeRequirementsArgs{...}
type GetChallengesStandardChallengeRequirementsInput interface {
	pulumi.Input

	ToGetChallengesStandardChallengeRequirementsOutput() GetChallengesStandardChallengeRequirementsOutput
	ToGetChallengesStandardChallengeRequirementsOutputWithContext(context.Context) GetChallengesStandardChallengeRequirementsOutput
}

type GetChallengesStandardChallengeRequirementsArgs struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior pulumi.StringInput `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites pulumi.StringArrayInput `pulumi:"prerequisites"`
}

func (GetChallengesStandardChallengeRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesStandardChallengeRequirements)(nil)).Elem()
}

func (i GetChallengesStandardChallengeRequirementsArgs) ToGetChallengesStandardChallengeRequirementsOutput() GetChallengesStandardChallengeRequirementsOutput {
	return i.ToGetChallengesStandardChallengeRequirementsOutputWithContext(context.Background())
}

func (i GetChallengesStandardChallengeRequirementsArgs) ToGetChallengesStandardChallengeRequirementsOutputWithContext(ctx context.Context) GetChallengesStandardChallengeRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesStandardChallengeRequirementsOutput)
}

type GetChallengesStandardChallengeRequirementsOutput struct{ *pulumi.OutputState }

func (GetChallengesStandardChallengeRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesStandardChallengeRequirements)(nil)).Elem()
}

func (o GetChallengesStandardChallengeRequirementsOutput) ToGetChallengesStandardChallengeRequirementsOutput() GetChallengesStandardChallengeRequirementsOutput {
	return o
}

func (o GetChallengesStandardChallengeRequirementsOutput) ToGetChallengesStandardChallengeRequirementsOutputWithContext(ctx context.Context) GetChallengesStandardChallengeRequirementsOutput {
	return o
}

// Behavior if not unlocked, either hidden or anonymized.
func (o GetChallengesStandardChallengeRequirementsOutput) Behavior() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesStandardChallengeRequirements) string { return v.Behavior }).(pulumi.StringOutput)
}

// List of the challenges ID.
func (o GetChallengesStandardChallengeRequirementsOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesStandardChallengeRequirements) []string { return v.Prerequisites }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicRequirementsInput)(nil)).Elem(), ChallengeDynamicRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeDynamicRequirementsPtrInput)(nil)).Elem(), ChallengeDynamicRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeStandardRequirementsInput)(nil)).Elem(), ChallengeStandardRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeStandardRequirementsPtrInput)(nil)).Elem(), ChallengeStandardRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesDynamicChallengeInput)(nil)).Elem(), GetChallengesDynamicChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesDynamicChallengeArrayInput)(nil)).Elem(), GetChallengesDynamicChallengeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesDynamicChallengeRequirementsInput)(nil)).Elem(), GetChallengesDynamicChallengeRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesStandardChallengeInput)(nil)).Elem(), GetChallengesStandardChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesStandardChallengeArrayInput)(nil)).Elem(), GetChallengesStandardChallengeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesStandardChallengeRequirementsInput)(nil)).Elem(), GetChallengesStandardChallengeRequirementsArgs{})
	pulumi.RegisterOutputType(ChallengeDynamicRequirementsOutput{})
	pulumi.RegisterOutputType(ChallengeDynamicRequirementsPtrOutput{})
	pulumi.RegisterOutputType(ChallengeStandardRequirementsOutput{})
	pulumi.RegisterOutputType(ChallengeStandardRequirementsPtrOutput{})
	pulumi.RegisterOutputType(GetChallengesDynamicChallengeOutput{})
	pulumi.RegisterOutputType(GetChallengesDynamicChallengeArrayOutput{})
	pulumi.RegisterOutputType(GetChallengesDynamicChallengeRequirementsOutput{})
	pulumi.RegisterOutputType(GetChallengesStandardChallengeOutput{})
	pulumi.RegisterOutputType(GetChallengesStandardChallengeArrayOutput{})
	pulumi.RegisterOutputType(GetChallengesStandardChallengeRequirementsOutput{})
}
