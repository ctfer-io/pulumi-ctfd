// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"github.com/ctfer-io/pulumi-ctfd/sdk/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ChallengeFile struct {
	// Raw content of the file, perfectly fit the use-cases of a .txt document or anything with a simple binary content. You could provide it from the file-system using `file("${path.module}/...")`.
	Content *string `pulumi:"content"`
	// Base 64 content of the file, perfectly fit the use-cases of complex binaries. You could provide it from the file-system using `filebase64("${path.module}/...")`.
	Contentb64 *string `pulumi:"contentb64"`
	// Identifier of the file, used internally to handle the CTFd corresponding object.
	Id *string `pulumi:"id"`
	// Location where the file is stored on the CTFd instance, for download purposes.
	Location *string `pulumi:"location"`
	// Name of the file as displayed to end-users.
	Name string `pulumi:"name"`
	// The sha1 sum of the file.
	Sha1sum *string `pulumi:"sha1sum"`
}

// ChallengeFileInput is an input type that accepts ChallengeFileArgs and ChallengeFileOutput values.
// You can construct a concrete instance of `ChallengeFileInput` via:
//
//	ChallengeFileArgs{...}
type ChallengeFileInput interface {
	pulumi.Input

	ToChallengeFileOutput() ChallengeFileOutput
	ToChallengeFileOutputWithContext(context.Context) ChallengeFileOutput
}

type ChallengeFileArgs struct {
	// Raw content of the file, perfectly fit the use-cases of a .txt document or anything with a simple binary content. You could provide it from the file-system using `file("${path.module}/...")`.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Base 64 content of the file, perfectly fit the use-cases of complex binaries. You could provide it from the file-system using `filebase64("${path.module}/...")`.
	Contentb64 pulumi.StringPtrInput `pulumi:"contentb64"`
	// Identifier of the file, used internally to handle the CTFd corresponding object.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Location where the file is stored on the CTFd instance, for download purposes.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of the file as displayed to end-users.
	Name pulumi.StringInput `pulumi:"name"`
	// The sha1 sum of the file.
	Sha1sum pulumi.StringPtrInput `pulumi:"sha1sum"`
}

func (ChallengeFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeFile)(nil)).Elem()
}

func (i ChallengeFileArgs) ToChallengeFileOutput() ChallengeFileOutput {
	return i.ToChallengeFileOutputWithContext(context.Background())
}

func (i ChallengeFileArgs) ToChallengeFileOutputWithContext(ctx context.Context) ChallengeFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeFileOutput)
}

// ChallengeFileArrayInput is an input type that accepts ChallengeFileArray and ChallengeFileArrayOutput values.
// You can construct a concrete instance of `ChallengeFileArrayInput` via:
//
//	ChallengeFileArray{ ChallengeFileArgs{...} }
type ChallengeFileArrayInput interface {
	pulumi.Input

	ToChallengeFileArrayOutput() ChallengeFileArrayOutput
	ToChallengeFileArrayOutputWithContext(context.Context) ChallengeFileArrayOutput
}

type ChallengeFileArray []ChallengeFileInput

func (ChallengeFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChallengeFile)(nil)).Elem()
}

func (i ChallengeFileArray) ToChallengeFileArrayOutput() ChallengeFileArrayOutput {
	return i.ToChallengeFileArrayOutputWithContext(context.Background())
}

func (i ChallengeFileArray) ToChallengeFileArrayOutputWithContext(ctx context.Context) ChallengeFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeFileArrayOutput)
}

type ChallengeFileOutput struct{ *pulumi.OutputState }

func (ChallengeFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeFile)(nil)).Elem()
}

func (o ChallengeFileOutput) ToChallengeFileOutput() ChallengeFileOutput {
	return o
}

func (o ChallengeFileOutput) ToChallengeFileOutputWithContext(ctx context.Context) ChallengeFileOutput {
	return o
}

// Raw content of the file, perfectly fit the use-cases of a .txt document or anything with a simple binary content. You could provide it from the file-system using `file("${path.module}/...")`.
func (o ChallengeFileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFile) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Base 64 content of the file, perfectly fit the use-cases of complex binaries. You could provide it from the file-system using `filebase64("${path.module}/...")`.
func (o ChallengeFileOutput) Contentb64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFile) *string { return v.Contentb64 }).(pulumi.StringPtrOutput)
}

// Identifier of the file, used internally to handle the CTFd corresponding object.
func (o ChallengeFileOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFile) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Location where the file is stored on the CTFd instance, for download purposes.
func (o ChallengeFileOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFile) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the file as displayed to end-users.
func (o ChallengeFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ChallengeFile) string { return v.Name }).(pulumi.StringOutput)
}

// The sha1 sum of the file.
func (o ChallengeFileOutput) Sha1sum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFile) *string { return v.Sha1sum }).(pulumi.StringPtrOutput)
}

type ChallengeFileArrayOutput struct{ *pulumi.OutputState }

func (ChallengeFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChallengeFile)(nil)).Elem()
}

func (o ChallengeFileArrayOutput) ToChallengeFileArrayOutput() ChallengeFileArrayOutput {
	return o
}

func (o ChallengeFileArrayOutput) ToChallengeFileArrayOutputWithContext(ctx context.Context) ChallengeFileArrayOutput {
	return o
}

func (o ChallengeFileArrayOutput) Index(i pulumi.IntInput) ChallengeFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChallengeFile {
		return vs[0].([]ChallengeFile)[vs[1].(int)]
	}).(ChallengeFileOutput)
}

type ChallengeFlag struct {
	// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
	Content string `pulumi:"content"`
	// The flag sensitivity information, either case*sensitive or case*insensitive
	Data *string `pulumi:"data"`
	// Identifier of the flag, used internally to handle the CTFd corresponding object.
	Id *string `pulumi:"id"`
	// The type of the flag, could be either static or regex
	Type *string `pulumi:"type"`
}

// ChallengeFlagInput is an input type that accepts ChallengeFlagArgs and ChallengeFlagOutput values.
// You can construct a concrete instance of `ChallengeFlagInput` via:
//
//	ChallengeFlagArgs{...}
type ChallengeFlagInput interface {
	pulumi.Input

	ToChallengeFlagOutput() ChallengeFlagOutput
	ToChallengeFlagOutputWithContext(context.Context) ChallengeFlagOutput
}

type ChallengeFlagArgs struct {
	// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
	Content pulumi.StringInput `pulumi:"content"`
	// The flag sensitivity information, either case*sensitive or case*insensitive
	Data pulumi.StringPtrInput `pulumi:"data"`
	// Identifier of the flag, used internally to handle the CTFd corresponding object.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the flag, could be either static or regex
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ChallengeFlagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeFlag)(nil)).Elem()
}

func (i ChallengeFlagArgs) ToChallengeFlagOutput() ChallengeFlagOutput {
	return i.ToChallengeFlagOutputWithContext(context.Background())
}

func (i ChallengeFlagArgs) ToChallengeFlagOutputWithContext(ctx context.Context) ChallengeFlagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeFlagOutput)
}

// ChallengeFlagArrayInput is an input type that accepts ChallengeFlagArray and ChallengeFlagArrayOutput values.
// You can construct a concrete instance of `ChallengeFlagArrayInput` via:
//
//	ChallengeFlagArray{ ChallengeFlagArgs{...} }
type ChallengeFlagArrayInput interface {
	pulumi.Input

	ToChallengeFlagArrayOutput() ChallengeFlagArrayOutput
	ToChallengeFlagArrayOutputWithContext(context.Context) ChallengeFlagArrayOutput
}

type ChallengeFlagArray []ChallengeFlagInput

func (ChallengeFlagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChallengeFlag)(nil)).Elem()
}

func (i ChallengeFlagArray) ToChallengeFlagArrayOutput() ChallengeFlagArrayOutput {
	return i.ToChallengeFlagArrayOutputWithContext(context.Background())
}

func (i ChallengeFlagArray) ToChallengeFlagArrayOutputWithContext(ctx context.Context) ChallengeFlagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeFlagArrayOutput)
}

type ChallengeFlagOutput struct{ *pulumi.OutputState }

func (ChallengeFlagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeFlag)(nil)).Elem()
}

func (o ChallengeFlagOutput) ToChallengeFlagOutput() ChallengeFlagOutput {
	return o
}

func (o ChallengeFlagOutput) ToChallengeFlagOutputWithContext(ctx context.Context) ChallengeFlagOutput {
	return o
}

// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
func (o ChallengeFlagOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ChallengeFlag) string { return v.Content }).(pulumi.StringOutput)
}

// The flag sensitivity information, either case*sensitive or case*insensitive
func (o ChallengeFlagOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFlag) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// Identifier of the flag, used internally to handle the CTFd corresponding object.
func (o ChallengeFlagOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFlag) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the flag, could be either static or regex
func (o ChallengeFlagOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeFlag) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ChallengeFlagArrayOutput struct{ *pulumi.OutputState }

func (ChallengeFlagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChallengeFlag)(nil)).Elem()
}

func (o ChallengeFlagArrayOutput) ToChallengeFlagArrayOutput() ChallengeFlagArrayOutput {
	return o
}

func (o ChallengeFlagArrayOutput) ToChallengeFlagArrayOutputWithContext(ctx context.Context) ChallengeFlagArrayOutput {
	return o
}

func (o ChallengeFlagArrayOutput) Index(i pulumi.IntInput) ChallengeFlagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChallengeFlag {
		return vs[0].([]ChallengeFlag)[vs[1].(int)]
	}).(ChallengeFlagOutput)
}

type ChallengeHint struct {
	// Content of the hint as displayed to the end-user.
	Content string `pulumi:"content"`
	// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
	Cost *int `pulumi:"cost"`
	// Identifier of the hint, used internally to handle the CTFd corresponding object.
	Id *string `pulumi:"id"`
	// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
	Requirements []string `pulumi:"requirements"`
}

// ChallengeHintInput is an input type that accepts ChallengeHintArgs and ChallengeHintOutput values.
// You can construct a concrete instance of `ChallengeHintInput` via:
//
//	ChallengeHintArgs{...}
type ChallengeHintInput interface {
	pulumi.Input

	ToChallengeHintOutput() ChallengeHintOutput
	ToChallengeHintOutputWithContext(context.Context) ChallengeHintOutput
}

type ChallengeHintArgs struct {
	// Content of the hint as displayed to the end-user.
	Content pulumi.StringInput `pulumi:"content"`
	// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
	Cost pulumi.IntPtrInput `pulumi:"cost"`
	// Identifier of the hint, used internally to handle the CTFd corresponding object.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
	Requirements pulumi.StringArrayInput `pulumi:"requirements"`
}

func (ChallengeHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeHint)(nil)).Elem()
}

func (i ChallengeHintArgs) ToChallengeHintOutput() ChallengeHintOutput {
	return i.ToChallengeHintOutputWithContext(context.Background())
}

func (i ChallengeHintArgs) ToChallengeHintOutputWithContext(ctx context.Context) ChallengeHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeHintOutput)
}

// ChallengeHintArrayInput is an input type that accepts ChallengeHintArray and ChallengeHintArrayOutput values.
// You can construct a concrete instance of `ChallengeHintArrayInput` via:
//
//	ChallengeHintArray{ ChallengeHintArgs{...} }
type ChallengeHintArrayInput interface {
	pulumi.Input

	ToChallengeHintArrayOutput() ChallengeHintArrayOutput
	ToChallengeHintArrayOutputWithContext(context.Context) ChallengeHintArrayOutput
}

type ChallengeHintArray []ChallengeHintInput

func (ChallengeHintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChallengeHint)(nil)).Elem()
}

func (i ChallengeHintArray) ToChallengeHintArrayOutput() ChallengeHintArrayOutput {
	return i.ToChallengeHintArrayOutputWithContext(context.Background())
}

func (i ChallengeHintArray) ToChallengeHintArrayOutputWithContext(ctx context.Context) ChallengeHintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeHintArrayOutput)
}

type ChallengeHintOutput struct{ *pulumi.OutputState }

func (ChallengeHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeHint)(nil)).Elem()
}

func (o ChallengeHintOutput) ToChallengeHintOutput() ChallengeHintOutput {
	return o
}

func (o ChallengeHintOutput) ToChallengeHintOutputWithContext(ctx context.Context) ChallengeHintOutput {
	return o
}

// Content of the hint as displayed to the end-user.
func (o ChallengeHintOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ChallengeHint) string { return v.Content }).(pulumi.StringOutput)
}

// Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
func (o ChallengeHintOutput) Cost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ChallengeHint) *int { return v.Cost }).(pulumi.IntPtrOutput)
}

// Identifier of the hint, used internally to handle the CTFd corresponding object.
func (o ChallengeHintOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeHint) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
func (o ChallengeHintOutput) Requirements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChallengeHint) []string { return v.Requirements }).(pulumi.StringArrayOutput)
}

type ChallengeHintArrayOutput struct{ *pulumi.OutputState }

func (ChallengeHintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChallengeHint)(nil)).Elem()
}

func (o ChallengeHintArrayOutput) ToChallengeHintArrayOutput() ChallengeHintArrayOutput {
	return o
}

func (o ChallengeHintArrayOutput) ToChallengeHintArrayOutputWithContext(ctx context.Context) ChallengeHintArrayOutput {
	return o
}

func (o ChallengeHintArrayOutput) Index(i pulumi.IntInput) ChallengeHintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChallengeHint {
		return vs[0].([]ChallengeHint)[vs[1].(int)]
	}).(ChallengeHintOutput)
}

type ChallengeRequirements struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior *string `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites []string `pulumi:"prerequisites"`
}

// ChallengeRequirementsInput is an input type that accepts ChallengeRequirementsArgs and ChallengeRequirementsOutput values.
// You can construct a concrete instance of `ChallengeRequirementsInput` via:
//
//	ChallengeRequirementsArgs{...}
type ChallengeRequirementsInput interface {
	pulumi.Input

	ToChallengeRequirementsOutput() ChallengeRequirementsOutput
	ToChallengeRequirementsOutputWithContext(context.Context) ChallengeRequirementsOutput
}

type ChallengeRequirementsArgs struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior pulumi.StringPtrInput `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites pulumi.StringArrayInput `pulumi:"prerequisites"`
}

func (ChallengeRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeRequirements)(nil)).Elem()
}

func (i ChallengeRequirementsArgs) ToChallengeRequirementsOutput() ChallengeRequirementsOutput {
	return i.ToChallengeRequirementsOutputWithContext(context.Background())
}

func (i ChallengeRequirementsArgs) ToChallengeRequirementsOutputWithContext(ctx context.Context) ChallengeRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeRequirementsOutput)
}

func (i ChallengeRequirementsArgs) ToChallengeRequirementsPtrOutput() ChallengeRequirementsPtrOutput {
	return i.ToChallengeRequirementsPtrOutputWithContext(context.Background())
}

func (i ChallengeRequirementsArgs) ToChallengeRequirementsPtrOutputWithContext(ctx context.Context) ChallengeRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeRequirementsOutput).ToChallengeRequirementsPtrOutputWithContext(ctx)
}

// ChallengeRequirementsPtrInput is an input type that accepts ChallengeRequirementsArgs, ChallengeRequirementsPtr and ChallengeRequirementsPtrOutput values.
// You can construct a concrete instance of `ChallengeRequirementsPtrInput` via:
//
//	        ChallengeRequirementsArgs{...}
//
//	or:
//
//	        nil
type ChallengeRequirementsPtrInput interface {
	pulumi.Input

	ToChallengeRequirementsPtrOutput() ChallengeRequirementsPtrOutput
	ToChallengeRequirementsPtrOutputWithContext(context.Context) ChallengeRequirementsPtrOutput
}

type challengeRequirementsPtrType ChallengeRequirementsArgs

func ChallengeRequirementsPtr(v *ChallengeRequirementsArgs) ChallengeRequirementsPtrInput {
	return (*challengeRequirementsPtrType)(v)
}

func (*challengeRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeRequirements)(nil)).Elem()
}

func (i *challengeRequirementsPtrType) ToChallengeRequirementsPtrOutput() ChallengeRequirementsPtrOutput {
	return i.ToChallengeRequirementsPtrOutputWithContext(context.Background())
}

func (i *challengeRequirementsPtrType) ToChallengeRequirementsPtrOutputWithContext(ctx context.Context) ChallengeRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeRequirementsPtrOutput)
}

type ChallengeRequirementsOutput struct{ *pulumi.OutputState }

func (ChallengeRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChallengeRequirements)(nil)).Elem()
}

func (o ChallengeRequirementsOutput) ToChallengeRequirementsOutput() ChallengeRequirementsOutput {
	return o
}

func (o ChallengeRequirementsOutput) ToChallengeRequirementsOutputWithContext(ctx context.Context) ChallengeRequirementsOutput {
	return o
}

func (o ChallengeRequirementsOutput) ToChallengeRequirementsPtrOutput() ChallengeRequirementsPtrOutput {
	return o.ToChallengeRequirementsPtrOutputWithContext(context.Background())
}

func (o ChallengeRequirementsOutput) ToChallengeRequirementsPtrOutputWithContext(ctx context.Context) ChallengeRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChallengeRequirements) *ChallengeRequirements {
		return &v
	}).(ChallengeRequirementsPtrOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeRequirementsOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChallengeRequirements) *string { return v.Behavior }).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeRequirementsOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChallengeRequirements) []string { return v.Prerequisites }).(pulumi.StringArrayOutput)
}

type ChallengeRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ChallengeRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChallengeRequirements)(nil)).Elem()
}

func (o ChallengeRequirementsPtrOutput) ToChallengeRequirementsPtrOutput() ChallengeRequirementsPtrOutput {
	return o
}

func (o ChallengeRequirementsPtrOutput) ToChallengeRequirementsPtrOutputWithContext(ctx context.Context) ChallengeRequirementsPtrOutput {
	return o
}

func (o ChallengeRequirementsPtrOutput) Elem() ChallengeRequirementsOutput {
	return o.ApplyT(func(v *ChallengeRequirements) ChallengeRequirements {
		if v != nil {
			return *v
		}
		var ret ChallengeRequirements
		return ret
	}).(ChallengeRequirementsOutput)
}

// Behavior if not unlocked, either hidden or anonymized.
func (o ChallengeRequirementsPtrOutput) Behavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChallengeRequirements) *string {
		if v == nil {
			return nil
		}
		return v.Behavior
	}).(pulumi.StringPtrOutput)
}

// List of the challenges ID.
func (o ChallengeRequirementsPtrOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChallengeRequirements) []string {
		if v == nil {
			return nil
		}
		return v.Prerequisites
	}).(pulumi.StringArrayOutput)
}

type GetChallengesChallenge struct {
	// Category of the challenge that CTFd groups by on the web UI.
	Category string `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
	ConnectionInfo string `pulumi:"connectionInfo"`
	Decay          int    `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description string `pulumi:"description"`
	// List of files given to players to flag the challenge.
	Files []GetChallengesChallengeFile `pulumi:"files"`
	// List of challenge flags that solves it.
	Flags []GetChallengesChallengeFlag `pulumi:"flags"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function string `pulumi:"function"`
	// List of hints about the challenge displayed to the end-user.
	Hints []GetChallengesChallengeHint `pulumi:"hints"`
	// Identifier of the challenge.
	Id string `pulumi:"id"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts int `pulumi:"maxAttempts"`
	Minimum     int `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name string `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next int `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements GetChallengesChallengeRequirements `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State string `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags []string `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics []string `pulumi:"topics"`
	// Type of the challenge defining its layout, either standard or dynamic.
	Type  string `pulumi:"type"`
	Value int    `pulumi:"value"`
}

// GetChallengesChallengeInput is an input type that accepts GetChallengesChallengeArgs and GetChallengesChallengeOutput values.
// You can construct a concrete instance of `GetChallengesChallengeInput` via:
//
//	GetChallengesChallengeArgs{...}
type GetChallengesChallengeInput interface {
	pulumi.Input

	ToGetChallengesChallengeOutput() GetChallengesChallengeOutput
	ToGetChallengesChallengeOutputWithContext(context.Context) GetChallengesChallengeOutput
}

type GetChallengesChallengeArgs struct {
	// Category of the challenge that CTFd groups by on the web UI.
	Category pulumi.StringInput `pulumi:"category"`
	// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
	ConnectionInfo pulumi.StringInput `pulumi:"connectionInfo"`
	Decay          pulumi.IntInput    `pulumi:"decay"`
	// Description of the challenge, consider using multiline descriptions for better style.
	Description pulumi.StringInput `pulumi:"description"`
	// List of files given to players to flag the challenge.
	Files GetChallengesChallengeFileArrayInput `pulumi:"files"`
	// List of challenge flags that solves it.
	Flags GetChallengesChallengeFlagArrayInput `pulumi:"flags"`
	// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
	Function pulumi.StringInput `pulumi:"function"`
	// List of hints about the challenge displayed to the end-user.
	Hints GetChallengesChallengeHintArrayInput `pulumi:"hints"`
	// Identifier of the challenge.
	Id pulumi.StringInput `pulumi:"id"`
	// Maximum amount of attempts before being unable to flag the challenge.
	MaxAttempts pulumi.IntInput `pulumi:"maxAttempts"`
	Minimum     pulumi.IntInput `pulumi:"minimum"`
	// Name of the challenge, displayed as it.
	Name pulumi.StringInput `pulumi:"name"`
	// Suggestion for the end-user as next challenge to work on.
	Next pulumi.IntInput `pulumi:"next"`
	// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
	Requirements GetChallengesChallengeRequirementsInput `pulumi:"requirements"`
	// State of the challenge, either hidden or visible.
	State pulumi.StringInput `pulumi:"state"`
	// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// List of challenge topics that are displayed to the administrators for maintenance and planification.
	Topics pulumi.StringArrayInput `pulumi:"topics"`
	// Type of the challenge defining its layout, either standard or dynamic.
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.IntInput    `pulumi:"value"`
}

func (GetChallengesChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallenge)(nil)).Elem()
}

func (i GetChallengesChallengeArgs) ToGetChallengesChallengeOutput() GetChallengesChallengeOutput {
	return i.ToGetChallengesChallengeOutputWithContext(context.Background())
}

func (i GetChallengesChallengeArgs) ToGetChallengesChallengeOutputWithContext(ctx context.Context) GetChallengesChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeOutput)
}

// GetChallengesChallengeArrayInput is an input type that accepts GetChallengesChallengeArray and GetChallengesChallengeArrayOutput values.
// You can construct a concrete instance of `GetChallengesChallengeArrayInput` via:
//
//	GetChallengesChallengeArray{ GetChallengesChallengeArgs{...} }
type GetChallengesChallengeArrayInput interface {
	pulumi.Input

	ToGetChallengesChallengeArrayOutput() GetChallengesChallengeArrayOutput
	ToGetChallengesChallengeArrayOutputWithContext(context.Context) GetChallengesChallengeArrayOutput
}

type GetChallengesChallengeArray []GetChallengesChallengeInput

func (GetChallengesChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallenge)(nil)).Elem()
}

func (i GetChallengesChallengeArray) ToGetChallengesChallengeArrayOutput() GetChallengesChallengeArrayOutput {
	return i.ToGetChallengesChallengeArrayOutputWithContext(context.Background())
}

func (i GetChallengesChallengeArray) ToGetChallengesChallengeArrayOutputWithContext(ctx context.Context) GetChallengesChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeArrayOutput)
}

type GetChallengesChallengeOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallenge)(nil)).Elem()
}

func (o GetChallengesChallengeOutput) ToGetChallengesChallengeOutput() GetChallengesChallengeOutput {
	return o
}

func (o GetChallengesChallengeOutput) ToGetChallengesChallengeOutputWithContext(ctx context.Context) GetChallengesChallengeOutput {
	return o
}

// Category of the challenge that CTFd groups by on the web UI.
func (o GetChallengesChallengeOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.Category }).(pulumi.StringOutput)
}

// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
func (o GetChallengesChallengeOutput) ConnectionInfo() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.ConnectionInfo }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeOutput) Decay() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesChallenge) int { return v.Decay }).(pulumi.IntOutput)
}

// Description of the challenge, consider using multiline descriptions for better style.
func (o GetChallengesChallengeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.Description }).(pulumi.StringOutput)
}

// List of files given to players to flag the challenge.
func (o GetChallengesChallengeOutput) Files() GetChallengesChallengeFileArrayOutput {
	return o.ApplyT(func(v GetChallengesChallenge) []GetChallengesChallengeFile { return v.Files }).(GetChallengesChallengeFileArrayOutput)
}

// List of challenge flags that solves it.
func (o GetChallengesChallengeOutput) Flags() GetChallengesChallengeFlagArrayOutput {
	return o.ApplyT(func(v GetChallengesChallenge) []GetChallengesChallengeFlag { return v.Flags }).(GetChallengesChallengeFlagArrayOutput)
}

// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
func (o GetChallengesChallengeOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.Function }).(pulumi.StringOutput)
}

// List of hints about the challenge displayed to the end-user.
func (o GetChallengesChallengeOutput) Hints() GetChallengesChallengeHintArrayOutput {
	return o.ApplyT(func(v GetChallengesChallenge) []GetChallengesChallengeHint { return v.Hints }).(GetChallengesChallengeHintArrayOutput)
}

// Identifier of the challenge.
func (o GetChallengesChallengeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.Id }).(pulumi.StringOutput)
}

// Maximum amount of attempts before being unable to flag the challenge.
func (o GetChallengesChallengeOutput) MaxAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesChallenge) int { return v.MaxAttempts }).(pulumi.IntOutput)
}

func (o GetChallengesChallengeOutput) Minimum() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesChallenge) int { return v.Minimum }).(pulumi.IntOutput)
}

// Name of the challenge, displayed as it.
func (o GetChallengesChallengeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.Name }).(pulumi.StringOutput)
}

// Suggestion for the end-user as next challenge to work on.
func (o GetChallengesChallengeOutput) Next() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesChallenge) int { return v.Next }).(pulumi.IntOutput)
}

// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
func (o GetChallengesChallengeOutput) Requirements() GetChallengesChallengeRequirementsOutput {
	return o.ApplyT(func(v GetChallengesChallenge) GetChallengesChallengeRequirements { return v.Requirements }).(GetChallengesChallengeRequirementsOutput)
}

// State of the challenge, either hidden or visible.
func (o GetChallengesChallengeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.State }).(pulumi.StringOutput)
}

// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
func (o GetChallengesChallengeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesChallenge) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// List of challenge topics that are displayed to the administrators for maintenance and planification.
func (o GetChallengesChallengeOutput) Topics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesChallenge) []string { return v.Topics }).(pulumi.StringArrayOutput)
}

// Type of the challenge defining its layout, either standard or dynamic.
func (o GetChallengesChallengeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallenge) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesChallenge) int { return v.Value }).(pulumi.IntOutput)
}

type GetChallengesChallengeArrayOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallenge)(nil)).Elem()
}

func (o GetChallengesChallengeArrayOutput) ToGetChallengesChallengeArrayOutput() GetChallengesChallengeArrayOutput {
	return o
}

func (o GetChallengesChallengeArrayOutput) ToGetChallengesChallengeArrayOutputWithContext(ctx context.Context) GetChallengesChallengeArrayOutput {
	return o
}

func (o GetChallengesChallengeArrayOutput) Index(i pulumi.IntInput) GetChallengesChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChallengesChallenge {
		return vs[0].([]GetChallengesChallenge)[vs[1].(int)]
	}).(GetChallengesChallengeOutput)
}

type GetChallengesChallengeFile struct {
	Content    string `pulumi:"content"`
	Contentb64 string `pulumi:"contentb64"`
	Id         string `pulumi:"id"`
	Location   string `pulumi:"location"`
	Name       string `pulumi:"name"`
}

// GetChallengesChallengeFileInput is an input type that accepts GetChallengesChallengeFileArgs and GetChallengesChallengeFileOutput values.
// You can construct a concrete instance of `GetChallengesChallengeFileInput` via:
//
//	GetChallengesChallengeFileArgs{...}
type GetChallengesChallengeFileInput interface {
	pulumi.Input

	ToGetChallengesChallengeFileOutput() GetChallengesChallengeFileOutput
	ToGetChallengesChallengeFileOutputWithContext(context.Context) GetChallengesChallengeFileOutput
}

type GetChallengesChallengeFileArgs struct {
	Content    pulumi.StringInput `pulumi:"content"`
	Contentb64 pulumi.StringInput `pulumi:"contentb64"`
	Id         pulumi.StringInput `pulumi:"id"`
	Location   pulumi.StringInput `pulumi:"location"`
	Name       pulumi.StringInput `pulumi:"name"`
}

func (GetChallengesChallengeFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeFile)(nil)).Elem()
}

func (i GetChallengesChallengeFileArgs) ToGetChallengesChallengeFileOutput() GetChallengesChallengeFileOutput {
	return i.ToGetChallengesChallengeFileOutputWithContext(context.Background())
}

func (i GetChallengesChallengeFileArgs) ToGetChallengesChallengeFileOutputWithContext(ctx context.Context) GetChallengesChallengeFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeFileOutput)
}

// GetChallengesChallengeFileArrayInput is an input type that accepts GetChallengesChallengeFileArray and GetChallengesChallengeFileArrayOutput values.
// You can construct a concrete instance of `GetChallengesChallengeFileArrayInput` via:
//
//	GetChallengesChallengeFileArray{ GetChallengesChallengeFileArgs{...} }
type GetChallengesChallengeFileArrayInput interface {
	pulumi.Input

	ToGetChallengesChallengeFileArrayOutput() GetChallengesChallengeFileArrayOutput
	ToGetChallengesChallengeFileArrayOutputWithContext(context.Context) GetChallengesChallengeFileArrayOutput
}

type GetChallengesChallengeFileArray []GetChallengesChallengeFileInput

func (GetChallengesChallengeFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallengeFile)(nil)).Elem()
}

func (i GetChallengesChallengeFileArray) ToGetChallengesChallengeFileArrayOutput() GetChallengesChallengeFileArrayOutput {
	return i.ToGetChallengesChallengeFileArrayOutputWithContext(context.Background())
}

func (i GetChallengesChallengeFileArray) ToGetChallengesChallengeFileArrayOutputWithContext(ctx context.Context) GetChallengesChallengeFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeFileArrayOutput)
}

type GetChallengesChallengeFileOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeFile)(nil)).Elem()
}

func (o GetChallengesChallengeFileOutput) ToGetChallengesChallengeFileOutput() GetChallengesChallengeFileOutput {
	return o
}

func (o GetChallengesChallengeFileOutput) ToGetChallengesChallengeFileOutputWithContext(ctx context.Context) GetChallengesChallengeFileOutput {
	return o
}

func (o GetChallengesChallengeFileOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFile) string { return v.Content }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeFileOutput) Contentb64() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFile) string { return v.Contentb64 }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeFileOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFile) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeFileOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFile) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFile) string { return v.Name }).(pulumi.StringOutput)
}

type GetChallengesChallengeFileArrayOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallengeFile)(nil)).Elem()
}

func (o GetChallengesChallengeFileArrayOutput) ToGetChallengesChallengeFileArrayOutput() GetChallengesChallengeFileArrayOutput {
	return o
}

func (o GetChallengesChallengeFileArrayOutput) ToGetChallengesChallengeFileArrayOutputWithContext(ctx context.Context) GetChallengesChallengeFileArrayOutput {
	return o
}

func (o GetChallengesChallengeFileArrayOutput) Index(i pulumi.IntInput) GetChallengesChallengeFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChallengesChallengeFile {
		return vs[0].([]GetChallengesChallengeFile)[vs[1].(int)]
	}).(GetChallengesChallengeFileOutput)
}

type GetChallengesChallengeFlag struct {
	Content string `pulumi:"content"`
	Data    string `pulumi:"data"`
	Id      string `pulumi:"id"`
	Type    string `pulumi:"type"`
}

// GetChallengesChallengeFlagInput is an input type that accepts GetChallengesChallengeFlagArgs and GetChallengesChallengeFlagOutput values.
// You can construct a concrete instance of `GetChallengesChallengeFlagInput` via:
//
//	GetChallengesChallengeFlagArgs{...}
type GetChallengesChallengeFlagInput interface {
	pulumi.Input

	ToGetChallengesChallengeFlagOutput() GetChallengesChallengeFlagOutput
	ToGetChallengesChallengeFlagOutputWithContext(context.Context) GetChallengesChallengeFlagOutput
}

type GetChallengesChallengeFlagArgs struct {
	Content pulumi.StringInput `pulumi:"content"`
	Data    pulumi.StringInput `pulumi:"data"`
	Id      pulumi.StringInput `pulumi:"id"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (GetChallengesChallengeFlagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeFlag)(nil)).Elem()
}

func (i GetChallengesChallengeFlagArgs) ToGetChallengesChallengeFlagOutput() GetChallengesChallengeFlagOutput {
	return i.ToGetChallengesChallengeFlagOutputWithContext(context.Background())
}

func (i GetChallengesChallengeFlagArgs) ToGetChallengesChallengeFlagOutputWithContext(ctx context.Context) GetChallengesChallengeFlagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeFlagOutput)
}

// GetChallengesChallengeFlagArrayInput is an input type that accepts GetChallengesChallengeFlagArray and GetChallengesChallengeFlagArrayOutput values.
// You can construct a concrete instance of `GetChallengesChallengeFlagArrayInput` via:
//
//	GetChallengesChallengeFlagArray{ GetChallengesChallengeFlagArgs{...} }
type GetChallengesChallengeFlagArrayInput interface {
	pulumi.Input

	ToGetChallengesChallengeFlagArrayOutput() GetChallengesChallengeFlagArrayOutput
	ToGetChallengesChallengeFlagArrayOutputWithContext(context.Context) GetChallengesChallengeFlagArrayOutput
}

type GetChallengesChallengeFlagArray []GetChallengesChallengeFlagInput

func (GetChallengesChallengeFlagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallengeFlag)(nil)).Elem()
}

func (i GetChallengesChallengeFlagArray) ToGetChallengesChallengeFlagArrayOutput() GetChallengesChallengeFlagArrayOutput {
	return i.ToGetChallengesChallengeFlagArrayOutputWithContext(context.Background())
}

func (i GetChallengesChallengeFlagArray) ToGetChallengesChallengeFlagArrayOutputWithContext(ctx context.Context) GetChallengesChallengeFlagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeFlagArrayOutput)
}

type GetChallengesChallengeFlagOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeFlagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeFlag)(nil)).Elem()
}

func (o GetChallengesChallengeFlagOutput) ToGetChallengesChallengeFlagOutput() GetChallengesChallengeFlagOutput {
	return o
}

func (o GetChallengesChallengeFlagOutput) ToGetChallengesChallengeFlagOutputWithContext(ctx context.Context) GetChallengesChallengeFlagOutput {
	return o
}

func (o GetChallengesChallengeFlagOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFlag) string { return v.Content }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeFlagOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFlag) string { return v.Data }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeFlagOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFlag) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeFlagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeFlag) string { return v.Type }).(pulumi.StringOutput)
}

type GetChallengesChallengeFlagArrayOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeFlagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallengeFlag)(nil)).Elem()
}

func (o GetChallengesChallengeFlagArrayOutput) ToGetChallengesChallengeFlagArrayOutput() GetChallengesChallengeFlagArrayOutput {
	return o
}

func (o GetChallengesChallengeFlagArrayOutput) ToGetChallengesChallengeFlagArrayOutputWithContext(ctx context.Context) GetChallengesChallengeFlagArrayOutput {
	return o
}

func (o GetChallengesChallengeFlagArrayOutput) Index(i pulumi.IntInput) GetChallengesChallengeFlagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChallengesChallengeFlag {
		return vs[0].([]GetChallengesChallengeFlag)[vs[1].(int)]
	}).(GetChallengesChallengeFlagOutput)
}

type GetChallengesChallengeHint struct {
	Content      string   `pulumi:"content"`
	Cost         int      `pulumi:"cost"`
	Id           string   `pulumi:"id"`
	Requirements []string `pulumi:"requirements"`
}

// GetChallengesChallengeHintInput is an input type that accepts GetChallengesChallengeHintArgs and GetChallengesChallengeHintOutput values.
// You can construct a concrete instance of `GetChallengesChallengeHintInput` via:
//
//	GetChallengesChallengeHintArgs{...}
type GetChallengesChallengeHintInput interface {
	pulumi.Input

	ToGetChallengesChallengeHintOutput() GetChallengesChallengeHintOutput
	ToGetChallengesChallengeHintOutputWithContext(context.Context) GetChallengesChallengeHintOutput
}

type GetChallengesChallengeHintArgs struct {
	Content      pulumi.StringInput      `pulumi:"content"`
	Cost         pulumi.IntInput         `pulumi:"cost"`
	Id           pulumi.StringInput      `pulumi:"id"`
	Requirements pulumi.StringArrayInput `pulumi:"requirements"`
}

func (GetChallengesChallengeHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeHint)(nil)).Elem()
}

func (i GetChallengesChallengeHintArgs) ToGetChallengesChallengeHintOutput() GetChallengesChallengeHintOutput {
	return i.ToGetChallengesChallengeHintOutputWithContext(context.Background())
}

func (i GetChallengesChallengeHintArgs) ToGetChallengesChallengeHintOutputWithContext(ctx context.Context) GetChallengesChallengeHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeHintOutput)
}

// GetChallengesChallengeHintArrayInput is an input type that accepts GetChallengesChallengeHintArray and GetChallengesChallengeHintArrayOutput values.
// You can construct a concrete instance of `GetChallengesChallengeHintArrayInput` via:
//
//	GetChallengesChallengeHintArray{ GetChallengesChallengeHintArgs{...} }
type GetChallengesChallengeHintArrayInput interface {
	pulumi.Input

	ToGetChallengesChallengeHintArrayOutput() GetChallengesChallengeHintArrayOutput
	ToGetChallengesChallengeHintArrayOutputWithContext(context.Context) GetChallengesChallengeHintArrayOutput
}

type GetChallengesChallengeHintArray []GetChallengesChallengeHintInput

func (GetChallengesChallengeHintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallengeHint)(nil)).Elem()
}

func (i GetChallengesChallengeHintArray) ToGetChallengesChallengeHintArrayOutput() GetChallengesChallengeHintArrayOutput {
	return i.ToGetChallengesChallengeHintArrayOutputWithContext(context.Background())
}

func (i GetChallengesChallengeHintArray) ToGetChallengesChallengeHintArrayOutputWithContext(ctx context.Context) GetChallengesChallengeHintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeHintArrayOutput)
}

type GetChallengesChallengeHintOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeHint)(nil)).Elem()
}

func (o GetChallengesChallengeHintOutput) ToGetChallengesChallengeHintOutput() GetChallengesChallengeHintOutput {
	return o
}

func (o GetChallengesChallengeHintOutput) ToGetChallengesChallengeHintOutputWithContext(ctx context.Context) GetChallengesChallengeHintOutput {
	return o
}

func (o GetChallengesChallengeHintOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeHint) string { return v.Content }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeHintOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v GetChallengesChallengeHint) int { return v.Cost }).(pulumi.IntOutput)
}

func (o GetChallengesChallengeHintOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeHint) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetChallengesChallengeHintOutput) Requirements() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesChallengeHint) []string { return v.Requirements }).(pulumi.StringArrayOutput)
}

type GetChallengesChallengeHintArrayOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeHintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChallengesChallengeHint)(nil)).Elem()
}

func (o GetChallengesChallengeHintArrayOutput) ToGetChallengesChallengeHintArrayOutput() GetChallengesChallengeHintArrayOutput {
	return o
}

func (o GetChallengesChallengeHintArrayOutput) ToGetChallengesChallengeHintArrayOutputWithContext(ctx context.Context) GetChallengesChallengeHintArrayOutput {
	return o
}

func (o GetChallengesChallengeHintArrayOutput) Index(i pulumi.IntInput) GetChallengesChallengeHintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChallengesChallengeHint {
		return vs[0].([]GetChallengesChallengeHint)[vs[1].(int)]
	}).(GetChallengesChallengeHintOutput)
}

type GetChallengesChallengeRequirements struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior string `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites []string `pulumi:"prerequisites"`
}

// GetChallengesChallengeRequirementsInput is an input type that accepts GetChallengesChallengeRequirementsArgs and GetChallengesChallengeRequirementsOutput values.
// You can construct a concrete instance of `GetChallengesChallengeRequirementsInput` via:
//
//	GetChallengesChallengeRequirementsArgs{...}
type GetChallengesChallengeRequirementsInput interface {
	pulumi.Input

	ToGetChallengesChallengeRequirementsOutput() GetChallengesChallengeRequirementsOutput
	ToGetChallengesChallengeRequirementsOutputWithContext(context.Context) GetChallengesChallengeRequirementsOutput
}

type GetChallengesChallengeRequirementsArgs struct {
	// Behavior if not unlocked, either hidden or anonymized.
	Behavior pulumi.StringInput `pulumi:"behavior"`
	// List of the challenges ID.
	Prerequisites pulumi.StringArrayInput `pulumi:"prerequisites"`
}

func (GetChallengesChallengeRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeRequirements)(nil)).Elem()
}

func (i GetChallengesChallengeRequirementsArgs) ToGetChallengesChallengeRequirementsOutput() GetChallengesChallengeRequirementsOutput {
	return i.ToGetChallengesChallengeRequirementsOutputWithContext(context.Background())
}

func (i GetChallengesChallengeRequirementsArgs) ToGetChallengesChallengeRequirementsOutputWithContext(ctx context.Context) GetChallengesChallengeRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChallengesChallengeRequirementsOutput)
}

type GetChallengesChallengeRequirementsOutput struct{ *pulumi.OutputState }

func (GetChallengesChallengeRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChallengesChallengeRequirements)(nil)).Elem()
}

func (o GetChallengesChallengeRequirementsOutput) ToGetChallengesChallengeRequirementsOutput() GetChallengesChallengeRequirementsOutput {
	return o
}

func (o GetChallengesChallengeRequirementsOutput) ToGetChallengesChallengeRequirementsOutputWithContext(ctx context.Context) GetChallengesChallengeRequirementsOutput {
	return o
}

// Behavior if not unlocked, either hidden or anonymized.
func (o GetChallengesChallengeRequirementsOutput) Behavior() pulumi.StringOutput {
	return o.ApplyT(func(v GetChallengesChallengeRequirements) string { return v.Behavior }).(pulumi.StringOutput)
}

// List of the challenges ID.
func (o GetChallengesChallengeRequirementsOutput) Prerequisites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetChallengesChallengeRequirements) []string { return v.Prerequisites }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeFileInput)(nil)).Elem(), ChallengeFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeFileArrayInput)(nil)).Elem(), ChallengeFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeFlagInput)(nil)).Elem(), ChallengeFlagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeFlagArrayInput)(nil)).Elem(), ChallengeFlagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeHintInput)(nil)).Elem(), ChallengeHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeHintArrayInput)(nil)).Elem(), ChallengeHintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeRequirementsInput)(nil)).Elem(), ChallengeRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeRequirementsPtrInput)(nil)).Elem(), ChallengeRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeInput)(nil)).Elem(), GetChallengesChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeArrayInput)(nil)).Elem(), GetChallengesChallengeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeFileInput)(nil)).Elem(), GetChallengesChallengeFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeFileArrayInput)(nil)).Elem(), GetChallengesChallengeFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeFlagInput)(nil)).Elem(), GetChallengesChallengeFlagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeFlagArrayInput)(nil)).Elem(), GetChallengesChallengeFlagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeHintInput)(nil)).Elem(), GetChallengesChallengeHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeHintArrayInput)(nil)).Elem(), GetChallengesChallengeHintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChallengesChallengeRequirementsInput)(nil)).Elem(), GetChallengesChallengeRequirementsArgs{})
	pulumi.RegisterOutputType(ChallengeFileOutput{})
	pulumi.RegisterOutputType(ChallengeFileArrayOutput{})
	pulumi.RegisterOutputType(ChallengeFlagOutput{})
	pulumi.RegisterOutputType(ChallengeFlagArrayOutput{})
	pulumi.RegisterOutputType(ChallengeHintOutput{})
	pulumi.RegisterOutputType(ChallengeHintArrayOutput{})
	pulumi.RegisterOutputType(ChallengeRequirementsOutput{})
	pulumi.RegisterOutputType(ChallengeRequirementsPtrOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeArrayOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeFileOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeFileArrayOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeFlagOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeFlagArrayOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeHintOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeHintArrayOutput{})
	pulumi.RegisterOutputType(GetChallengesChallengeRequirementsOutput{})
}
