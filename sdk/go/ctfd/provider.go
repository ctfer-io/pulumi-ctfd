// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ctfd

import (
	"context"
	"reflect"

	"github.com/ctfer-io/pulumi-ctfd/sdk/go/ctfd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the ctfd package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// User API key. Could use `CTFD_API_KEY` environment variable instead. Despite being the most convenient way to
	// authenticate yourself, we do not recommend it as you will probably generate a long-live token without any rotation
	// policy.
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// User session nonce, comes with session. Could use `CTFD_NONCE` environment variable instead.
	Nonce pulumi.StringPtrOutput `pulumi:"nonce"`
	// User session token, comes with nonce. Could use `CTFD_SESSION` environment variable instead.
	Session pulumi.StringPtrOutput `pulumi:"session"`
	// CTFd base URL (e.g. `https://my-ctf.lan`). Could use `CTFD_URL` environment variable instead.
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	if args.Nonce != nil {
		args.Nonce = pulumi.ToSecret(args.Nonce).(pulumi.StringPtrInput)
	}
	if args.Session != nil {
		args.Session = pulumi.ToSecret(args.Session).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"nonce",
		"session",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:ctfd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// User API key. Could use `CTFD_API_KEY` environment variable instead. Despite being the most convenient way to
	// authenticate yourself, we do not recommend it as you will probably generate a long-live token without any rotation
	// policy.
	ApiKey *string `pulumi:"apiKey"`
	// User session nonce, comes with session. Could use `CTFD_NONCE` environment variable instead.
	Nonce *string `pulumi:"nonce"`
	// User session token, comes with nonce. Could use `CTFD_SESSION` environment variable instead.
	Session *string `pulumi:"session"`
	// CTFd base URL (e.g. `https://my-ctf.lan`). Could use `CTFD_URL` environment variable instead.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// User API key. Could use `CTFD_API_KEY` environment variable instead. Despite being the most convenient way to
	// authenticate yourself, we do not recommend it as you will probably generate a long-live token without any rotation
	// policy.
	ApiKey pulumi.StringPtrInput
	// User session nonce, comes with session. Could use `CTFD_NONCE` environment variable instead.
	Nonce pulumi.StringPtrInput
	// User session token, comes with nonce. Could use `CTFD_SESSION` environment variable instead.
	Session pulumi.StringPtrInput
	// CTFd base URL (e.g. `https://my-ctf.lan`). Could use `CTFD_URL` environment variable instead.
	Url pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// User API key. Could use `CTFD_API_KEY` environment variable instead. Despite being the most convenient way to
// authenticate yourself, we do not recommend it as you will probably generate a long-live token without any rotation
// policy.
func (o ProviderOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// User session nonce, comes with session. Could use `CTFD_NONCE` environment variable instead.
func (o ProviderOutput) Nonce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Nonce }).(pulumi.StringPtrOutput)
}

// User session token, comes with nonce. Could use `CTFD_SESSION` environment variable instead.
func (o ProviderOutput) Session() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Session }).(pulumi.StringPtrOutput)
}

// CTFd base URL (e.g. `https://my-ctf.lan`). Could use `CTFD_URL` environment variable instead.
func (o ProviderOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
