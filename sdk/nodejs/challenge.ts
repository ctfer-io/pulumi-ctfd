// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
 *
 * This provider builds a cleaner API on top of CTFd's one to improve its adoption and lifecycle management.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ctfd from "@ctfer-io/pulumi-ctfd";
 * import * as fs from "fs";
 *
 * const http = new ctfd.Challenge("http", {
 *     category: "misc",
 *     description: "...",
 *     value: 500,
 *     decay: 100,
 *     minimum: 50,
 *     state: "visible",
 *     "function": "logarithmic",
 *     flags: [{
 *         content: "CTF{some_flag}",
 *     }],
 *     topics: ["Misc"],
 *     tags: [
 *         "misc",
 *         "basic",
 *     ],
 *     hints: [
 *         {
 *             content: "Some super-helpful hint",
 *             cost: 50,
 *         },
 *         {
 *             content: "Even more helpful hint !",
 *             cost: 50,
 *         },
 *     ],
 *     files: [{
 *         name: "image.png",
 *         contentb64: fs.readFileSync(".../image.png", { encoding: "base64" }),
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Challenge extends pulumi.CustomResource {
    /**
     * Get an existing Challenge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChallengeState, opts?: pulumi.CustomResourceOptions): Challenge {
        return new Challenge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ctfd:index/challenge:Challenge';

    /**
     * Returns true if the given object is an instance of Challenge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Challenge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Challenge.__pulumiType;
    }

    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
     */
    public readonly connectionInfo!: pulumi.Output<string>;
    /**
     * The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
     */
    public readonly decay!: pulumi.Output<number | undefined>;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of files given to players to flag the challenge.
     */
    public readonly files!: pulumi.Output<outputs.ChallengeFile[] | undefined>;
    /**
     * List of challenge flags that solves it.
     */
    public readonly flags!: pulumi.Output<outputs.ChallengeFlag[] | undefined>;
    /**
     * Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
     */
    public readonly function!: pulumi.Output<string>;
    /**
     * List of hints about the challenge displayed to the end-user.
     */
    public readonly hints!: pulumi.Output<outputs.ChallengeHint[] | undefined>;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    public readonly maxAttempts!: pulumi.Output<number>;
    /**
     * The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
     */
    public readonly minimum!: pulumi.Output<number | undefined>;
    /**
     * Name of the file as displayed to end-users.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    public readonly next!: pulumi.Output<number | undefined>;
    /**
     * Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
     */
    public readonly requirements!: pulumi.Output<outputs.ChallengeRequirements | undefined>;
    /**
     * State of the challenge, either hidden or visible.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    public readonly topics!: pulumi.Output<string[] | undefined>;
    /**
     * The type of the flag, could be either static or regex
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
     */
    public readonly value!: pulumi.Output<number>;

    /**
     * Create a Challenge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChallengeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChallengeArgs | ChallengeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChallengeState | undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["connectionInfo"] = state ? state.connectionInfo : undefined;
            resourceInputs["decay"] = state ? state.decay : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["flags"] = state ? state.flags : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["hints"] = state ? state.hints : undefined;
            resourceInputs["maxAttempts"] = state ? state.maxAttempts : undefined;
            resourceInputs["minimum"] = state ? state.minimum : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["next"] = state ? state.next : undefined;
            resourceInputs["requirements"] = state ? state.requirements : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ChallengeArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["connectionInfo"] = args ? args.connectionInfo : undefined;
            resourceInputs["decay"] = args ? args.decay : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["flags"] = args ? args.flags : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["hints"] = args ? args.hints : undefined;
            resourceInputs["maxAttempts"] = args ? args.maxAttempts : undefined;
            resourceInputs["minimum"] = args ? args.minimum : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["next"] = args ? args.next : undefined;
            resourceInputs["requirements"] = args ? args.requirements : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Challenge.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Challenge resources.
 */
export interface ChallengeState {
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    category?: pulumi.Input<string>;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
     */
    connectionInfo?: pulumi.Input<string>;
    /**
     * The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
     */
    decay?: pulumi.Input<number>;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    description?: pulumi.Input<string>;
    /**
     * List of files given to players to flag the challenge.
     */
    files?: pulumi.Input<pulumi.Input<inputs.ChallengeFile>[]>;
    /**
     * List of challenge flags that solves it.
     */
    flags?: pulumi.Input<pulumi.Input<inputs.ChallengeFlag>[]>;
    /**
     * Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
     */
    function?: pulumi.Input<string>;
    /**
     * List of hints about the challenge displayed to the end-user.
     */
    hints?: pulumi.Input<pulumi.Input<inputs.ChallengeHint>[]>;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    maxAttempts?: pulumi.Input<number>;
    /**
     * The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
     */
    minimum?: pulumi.Input<number>;
    /**
     * Name of the file as displayed to end-users.
     */
    name?: pulumi.Input<string>;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    next?: pulumi.Input<number>;
    /**
     * Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
     */
    requirements?: pulumi.Input<inputs.ChallengeRequirements>;
    /**
     * State of the challenge, either hidden or visible.
     */
    state?: pulumi.Input<string>;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the flag, could be either static or regex
     */
    type?: pulumi.Input<string>;
    /**
     * The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
     */
    value?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Challenge resource.
 */
export interface ChallengeArgs {
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    category: pulumi.Input<string>;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
     */
    connectionInfo?: pulumi.Input<string>;
    /**
     * The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
     */
    decay?: pulumi.Input<number>;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    description: pulumi.Input<string>;
    /**
     * List of files given to players to flag the challenge.
     */
    files?: pulumi.Input<pulumi.Input<inputs.ChallengeFile>[]>;
    /**
     * List of challenge flags that solves it.
     */
    flags?: pulumi.Input<pulumi.Input<inputs.ChallengeFlag>[]>;
    /**
     * Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
     */
    function?: pulumi.Input<string>;
    /**
     * List of hints about the challenge displayed to the end-user.
     */
    hints?: pulumi.Input<pulumi.Input<inputs.ChallengeHint>[]>;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    maxAttempts?: pulumi.Input<number>;
    /**
     * The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
     */
    minimum?: pulumi.Input<number>;
    /**
     * Name of the file as displayed to end-users.
     */
    name?: pulumi.Input<string>;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    next?: pulumi.Input<number>;
    /**
     * Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
     */
    requirements?: pulumi.Input<inputs.ChallengeRequirements>;
    /**
     * State of the challenge, either hidden or visible.
     */
    state?: pulumi.Input<string>;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the flag, could be either static or regex
     */
    type?: pulumi.Input<string>;
    /**
     * The value (points) of the challenge once solved. Internally, the provider will handle what target is legitimate depending on the `.type` value, i.e. either `value` for "standard" or `initial` for "dynamic".
     */
    value: pulumi.Input<number>;
}
