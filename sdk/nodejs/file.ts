// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A CTFd file for a challenge.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ctfd from "@ctfer-io/pulumi-ctfd";
 * import * as fs from "fs";
 *
 * const http = new ctfd.Challenge("http", {
 *     category: "misc",
 *     description: "...",
 *     value: 500,
 *     decay: 100,
 *     minimum: 50,
 *     state: "visible",
 *     "function": "logarithmic",
 *     topics: ["Misc"],
 *     tags: [
 *         "misc",
 *         "basic",
 *     ],
 * });
 * const httpFile = new ctfd.File("httpFile", {
 *     challengeId: http.id,
 *     contentb64: fs.readFileSync(".../image.png", { encoding: "base64" }),
 * });
 * ```
 */
export class File extends pulumi.CustomResource {
    /**
     * Get an existing File resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileState, opts?: pulumi.CustomResourceOptions): File {
        return new File(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ctfd:index/file:File';

    /**
     * Returns true if the given object is an instance of File.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is File {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === File.__pulumiType;
    }

    /**
     * Challenge of the file.
     */
    public readonly challengeId!: pulumi.Output<string | undefined>;
    /**
     * Raw content of the file, perfectly fit the use-cases of a .txt document or anything with a simple binary content. You could provide it from the file-system using `file("${path.module}/...")`.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Base 64 content of the file, perfectly fit the use-cases of complex binaries. You could provide it from the file-system using `filebase64("${path.module}/...")`.
     */
    public readonly contentb64!: pulumi.Output<string>;
    /**
     * Location where the file is stored on the CTFd instance, for download purposes.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of the file as displayed to end-users.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The sha1 sum of the file.
     */
    public /*out*/ readonly sha1sum!: pulumi.Output<string>;

    /**
     * Create a File resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileArgs | FileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileState | undefined;
            resourceInputs["challengeId"] = state ? state.challengeId : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentb64"] = state ? state.contentb64 : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sha1sum"] = state ? state.sha1sum : undefined;
        } else {
            const args = argsOrState as FileArgs | undefined;
            resourceInputs["challengeId"] = args ? args.challengeId : undefined;
            resourceInputs["content"] = args?.content ? pulumi.secret(args.content) : undefined;
            resourceInputs["contentb64"] = args?.contentb64 ? pulumi.secret(args.contentb64) : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sha1sum"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["content", "contentb64"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(File.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering File resources.
 */
export interface FileState {
    /**
     * Challenge of the file.
     */
    challengeId?: pulumi.Input<string>;
    /**
     * Raw content of the file, perfectly fit the use-cases of a .txt document or anything with a simple binary content. You could provide it from the file-system using `file("${path.module}/...")`.
     */
    content?: pulumi.Input<string>;
    /**
     * Base 64 content of the file, perfectly fit the use-cases of complex binaries. You could provide it from the file-system using `filebase64("${path.module}/...")`.
     */
    contentb64?: pulumi.Input<string>;
    /**
     * Location where the file is stored on the CTFd instance, for download purposes.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the file as displayed to end-users.
     */
    name?: pulumi.Input<string>;
    /**
     * The sha1 sum of the file.
     */
    sha1sum?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a File resource.
 */
export interface FileArgs {
    /**
     * Challenge of the file.
     */
    challengeId?: pulumi.Input<string>;
    /**
     * Raw content of the file, perfectly fit the use-cases of a .txt document or anything with a simple binary content. You could provide it from the file-system using `file("${path.module}/...")`.
     */
    content?: pulumi.Input<string>;
    /**
     * Base 64 content of the file, perfectly fit the use-cases of complex binaries. You could provide it from the file-system using `filebase64("${path.module}/...")`.
     */
    contentb64?: pulumi.Input<string>;
    /**
     * Location where the file is stored on the CTFd instance, for download purposes.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the file as displayed to end-users.
     */
    name?: pulumi.Input<string>;
}
