// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * CTFd defines a Team as a group of Users who will attend the Capture The Flag event.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ctfd from "@ctfer-io/pulumi-ctfd";
 *
 * const ctfer = new ctfd.User("ctfer", {
 *     email: "ctfer-io@protonmail.com",
 *     password: "password",
 * });
 * const cybercombattants = new ctfd.Team("cybercombattants", {
 *     email: "lucastesson@protonmail.com",
 *     password: "password",
 *     members: [ctfer.id],
 *     captain: ctfer.id,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ctfd:index/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * Affiliation to a company or agency.
     */
    public readonly affiliation!: pulumi.Output<string | undefined>;
    /**
     * Is true if the team is banned from the CTF.
     */
    public readonly banned!: pulumi.Output<boolean>;
    /**
     * Member who is captain of the team. Must be part of the members too. Note it could cause a fatal error in case of resource import with an inconsistent CTFd configuration i.e. if a team has no captain yet (should not be possible).
     */
    public readonly captain!: pulumi.Output<string>;
    /**
     * Country the team represent or is hail from.
     */
    public readonly country!: pulumi.Output<string | undefined>;
    /**
     * Email of the team.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Is true if the team is hidden to the participants.
     */
    public readonly hidden!: pulumi.Output<boolean>;
    /**
     * List of members (User), defined by their IDs.
     */
    public readonly members!: pulumi.Output<string[]>;
    /**
     * Name of the team.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Website, blog, or anything similar (displayed to other participants).
     */
    public readonly website!: pulumi.Output<string | undefined>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["affiliation"] = state ? state.affiliation : undefined;
            resourceInputs["banned"] = state ? state.banned : undefined;
            resourceInputs["captain"] = state ? state.captain : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            if ((!args || args.captain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'captain'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.members === undefined) && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["affiliation"] = args ? args.affiliation : undefined;
            resourceInputs["banned"] = args ? args.banned : undefined;
            resourceInputs["captain"] = args ? args.captain : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * Affiliation to a company or agency.
     */
    affiliation?: pulumi.Input<string>;
    /**
     * Is true if the team is banned from the CTF.
     */
    banned?: pulumi.Input<boolean>;
    /**
     * Member who is captain of the team. Must be part of the members too. Note it could cause a fatal error in case of resource import with an inconsistent CTFd configuration i.e. if a team has no captain yet (should not be possible).
     */
    captain?: pulumi.Input<string>;
    /**
     * Country the team represent or is hail from.
     */
    country?: pulumi.Input<string>;
    /**
     * Email of the team.
     */
    email?: pulumi.Input<string>;
    /**
     * Is true if the team is hidden to the participants.
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * List of members (User), defined by their IDs.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
     */
    password?: pulumi.Input<string>;
    /**
     * Website, blog, or anything similar (displayed to other participants).
     */
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * Affiliation to a company or agency.
     */
    affiliation?: pulumi.Input<string>;
    /**
     * Is true if the team is banned from the CTF.
     */
    banned?: pulumi.Input<boolean>;
    /**
     * Member who is captain of the team. Must be part of the members too. Note it could cause a fatal error in case of resource import with an inconsistent CTFd configuration i.e. if a team has no captain yet (should not be possible).
     */
    captain: pulumi.Input<string>;
    /**
     * Country the team represent or is hail from.
     */
    country?: pulumi.Input<string>;
    /**
     * Email of the team.
     */
    email: pulumi.Input<string>;
    /**
     * Is true if the team is hidden to the participants.
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * List of members (User), defined by their IDs.
     */
    members: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the team.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
     */
    password: pulumi.Input<string>;
    /**
     * Website, blog, or anything similar (displayed to other participants).
     */
    website?: pulumi.Input<string>;
}
