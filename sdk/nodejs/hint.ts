// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A hint for a challenge to help players solve it.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ctfd from "@ctfer-io/pulumi-ctfd";
 *
 * const http = new ctfd.Challenge("http", {
 *     category: "misc",
 *     description: "...",
 *     value: 500,
 *     decay: 100,
 *     minimum: 50,
 *     state: "visible",
 *     "function": "logarithmic",
 *     topics: ["Misc"],
 *     tags: [
 *         "misc",
 *         "basic",
 *     ],
 * });
 * const httpFlag = new ctfd.Flag("httpFlag", {
 *     challengeId: http.id,
 *     content: "CTF{some_flag}",
 * });
 * const httpHint = new ctfd.Hint("httpHint", {
 *     challengeId: http.id,
 *     content: "Some super-helpful hint",
 *     cost: 50,
 * });
 * const httpHint2 = new ctfd.Hint("httpHint2", {
 *     challengeId: http.id,
 *     content: "Even more helpful hint !",
 *     cost: 50,
 *     requirements: [ctfd_hint.http_hint_1.id],
 * });
 * ```
 */
export class Hint extends pulumi.CustomResource {
    /**
     * Get an existing Hint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HintState, opts?: pulumi.CustomResourceOptions): Hint {
        return new Hint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ctfd:index/hint:Hint';

    /**
     * Returns true if the given object is an instance of Hint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hint.__pulumiType;
    }

    /**
     * Challenge of the hint.
     */
    public readonly challengeId!: pulumi.Output<string>;
    /**
     * Content of the hint as displayed to the end-user.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
     */
    public readonly cost!: pulumi.Output<number>;
    /**
     * List of the other hints it depends on.
     */
    public readonly requirements!: pulumi.Output<string[]>;

    /**
     * Create a Hint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HintArgs | HintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HintState | undefined;
            resourceInputs["challengeId"] = state ? state.challengeId : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["cost"] = state ? state.cost : undefined;
            resourceInputs["requirements"] = state ? state.requirements : undefined;
        } else {
            const args = argsOrState as HintArgs | undefined;
            if ((!args || args.challengeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'challengeId'");
            }
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            resourceInputs["challengeId"] = args ? args.challengeId : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["cost"] = args ? args.cost : undefined;
            resourceInputs["requirements"] = args ? args.requirements : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Hint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hint resources.
 */
export interface HintState {
    /**
     * Challenge of the hint.
     */
    challengeId?: pulumi.Input<string>;
    /**
     * Content of the hint as displayed to the end-user.
     */
    content?: pulumi.Input<string>;
    /**
     * Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
     */
    cost?: pulumi.Input<number>;
    /**
     * List of the other hints it depends on.
     */
    requirements?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Hint resource.
 */
export interface HintArgs {
    /**
     * Challenge of the hint.
     */
    challengeId: pulumi.Input<string>;
    /**
     * Content of the hint as displayed to the end-user.
     */
    content: pulumi.Input<string>;
    /**
     * Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
     */
    cost?: pulumi.Input<number>;
    /**
     * List of the other hints it depends on.
     */
    requirements?: pulumi.Input<pulumi.Input<string>[]>;
}
