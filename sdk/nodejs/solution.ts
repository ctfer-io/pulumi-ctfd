// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The solution to a challenge.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ctfd from "@ctfer-io/pulumi-ctfd";
 *
 * const example = new ctfd.ChallengeStandard("example", {
 *     category: "test",
 *     description: "Example challenge description...",
 *     value: 500,
 * });
 * const wu = new ctfd.Solution("wu", {
 *     challengeId: example.id,
 *     content: "Here is how to solve the challenge: ...",
 *     state: "visible",
 * });
 * ```
 */
export class Solution extends pulumi.CustomResource {
    /**
     * Get an existing Solution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SolutionState, opts?: pulumi.CustomResourceOptions): Solution {
        return new Solution(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ctfd:index/solution:Solution';

    /**
     * Returns true if the given object is an instance of Solution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Solution {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Solution.__pulumiType;
    }

    /**
     * Challenge of the solution.
     */
    public readonly challengeId!: pulumi.Output<string>;
    /**
     * The solution to the challenge, in markdown.
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * State of the solution, either hidden or visible.
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a Solution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SolutionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SolutionArgs | SolutionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SolutionState | undefined;
            resourceInputs["challengeId"] = state ? state.challengeId : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as SolutionArgs | undefined;
            if ((!args || args.challengeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'challengeId'");
            }
            resourceInputs["challengeId"] = args ? args.challengeId : undefined;
            resourceInputs["content"] = args?.content ? pulumi.secret(args.content) : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["content"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Solution.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Solution resources.
 */
export interface SolutionState {
    /**
     * Challenge of the solution.
     */
    challengeId?: pulumi.Input<string>;
    /**
     * The solution to the challenge, in markdown.
     */
    content?: pulumi.Input<string>;
    /**
     * State of the solution, either hidden or visible.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Solution resource.
 */
export interface SolutionArgs {
    /**
     * Challenge of the solution.
     */
    challengeId: pulumi.Input<string>;
    /**
     * The solution to the challenge, in markdown.
     */
    content?: pulumi.Input<string>;
    /**
     * State of the solution, either hidden or visible.
     */
    state?: pulumi.Input<string>;
}
