// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ChallengeDynamicRequirements {
    /**
     * Behavior if not unlocked, either hidden or anonymized.
     */
    behavior: string;
    /**
     * List of the challenges ID.
     */
    prerequisites?: string[];
}

export interface ChallengeStandardRequirements {
    /**
     * Behavior if not unlocked, either hidden or anonymized.
     */
    behavior: string;
    /**
     * List of the challenges ID.
     */
    prerequisites?: string[];
}

export interface GetChallengesDynamicChallenge {
    /**
     * Attribution to the creator(s) of the challenge.
     */
    attribution: string;
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    category: string;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn or web pentest.
     */
    connectionInfo: string;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    description: string;
    /**
     * Identifier of the challenge.
     */
    id: string;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    maxAttempts: number;
    /**
     * Name of the challenge, displayed as it.
     */
    name: string;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    next: number;
    /**
     * List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
     */
    requirements: outputs.GetChallengesDynamicChallengeRequirements;
    /**
     * State of the challenge, either hidden or visible.
     */
    state: string;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    tags: string[];
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    topics: string[];
    value: number;
}

export interface GetChallengesDynamicChallengeRequirements {
    /**
     * Behavior if not unlocked, either hidden or anonymized.
     */
    behavior: string;
    /**
     * List of the challenges ID.
     */
    prerequisites: string[];
}

export interface GetChallengesStandardChallenge {
    /**
     * Attribution to the creator(s) of the challenge.
     */
    attribution: string;
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    category: string;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn or web pentest.
     */
    connectionInfo: string;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    description: string;
    /**
     * Identifier of the challenge.
     */
    id: string;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    maxAttempts: number;
    /**
     * Name of the challenge, displayed as it.
     */
    name: string;
    /**
     * Suggestion for the end-user as next challenge to work on.
     */
    next: number;
    /**
     * List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
     */
    requirements: outputs.GetChallengesStandardChallengeRequirements;
    /**
     * State of the challenge, either hidden or visible.
     */
    state: string;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    tags: string[];
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    topics: string[];
    value: number;
}

export interface GetChallengesStandardChallengeRequirements {
    /**
     * Behavior if not unlocked, either hidden or anonymized.
     */
    behavior: string;
    /**
     * List of the challenges ID.
     */
    prerequisites: string[];
}

