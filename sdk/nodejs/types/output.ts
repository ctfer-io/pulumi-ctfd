// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ChallengeFile {
    /**
     * Raw content of the file, perfectly fit the use-cases of a .txt document or anything with a simple binary content. You could provide it from the file-system using `file("${path.module}/...")`.
     */
    content: string;
    /**
     * Base 64 content of the file, perfectly fit the use-cases of complex binaries. You could provide it from the file-system using `filebase64("${path.module}/...")`.
     */
    contentb64: string;
    /**
     * Identifier of the file, used internally to handle the CTFd corresponding object.
     */
    id: string;
    /**
     * Location where the file is stored on the CTFd instance, for download purposes.
     */
    location: string;
    /**
     * Name of the file as displayed to end-users.
     */
    name: string;
}

export interface ChallengeFlag {
    /**
     * The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
     */
    content: string;
    /**
     * The flag sensitivity information, either case*sensitive or case*insensitive
     */
    data: string;
    /**
     * Identifier of the flag, used internally to handle the CTFd corresponding object.
     */
    id: string;
    /**
     * The type of the flag, could be either static or regex
     */
    type: string;
}

export interface ChallengeHint {
    /**
     * Content of the hint as displayed to the end-user.
     */
    content: string;
    /**
     * Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
     */
    cost: number;
    /**
     * Identifier of the hint, used internally to handle the CTFd corresponding object.
     */
    id: string;
    /**
     * Other hints required to be consumed before getting this one. Useful for cost-increasing hint strategies with more and more help.
     */
    requirements: string[];
}

export interface ChallengeRequirements {
    /**
     * Behavior if not unlocked, either hidden or anonymized.
     */
    behavior: string;
    /**
     * List of the challenges ID.
     */
    prerequisites?: string[];
}

export interface GetChallengesChallenge {
    /**
     * Category of the challenge that CTFd groups by on the web UI.
     */
    category: string;
    /**
     * Connection Information to connect to the challenge instance, useful for pwn or web pentest.
     */
    connectionInfo: string;
    decay: number;
    /**
     * Description of the challenge, consider using multiline descriptions for better style.
     */
    description: string;
    /**
     * List of files given to players to flag the challenge.
     */
    files: outputs.GetChallengesChallengeFile[];
    /**
     * List of challenge flags that solves it.
     */
    flags: outputs.GetChallengesChallengeFlag[];
    /**
     * Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
     */
    function: string;
    /**
     * List of hints about the challenge displayed to the end-user.
     */
    hints: outputs.GetChallengesChallengeHint[];
    /**
     * Identifier of the challenge.
     */
    id: string;
    initial: number;
    /**
     * Maximum amount of attempts before being unable to flag the challenge.
     */
    maxAttempts: number;
    minimum: number;
    /**
     * Name of the challenge, displayed as it.
     */
    name: string;
    /**
     * List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
     */
    requirements: outputs.GetChallengesChallengeRequirements;
    /**
     * State of the challenge, either hidden or visible.
     */
    state: string;
    /**
     * List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
     */
    tags: string[];
    /**
     * List of challenge topics that are displayed to the administrators for maintenance and planification.
     */
    topics: string[];
    /**
     * Type of the challenge defining its layout, either standard or dynamic.
     */
    type: string;
    value: number;
}

export interface GetChallengesChallengeFile {
    content: string;
    contentb64: string;
    id: string;
    location: string;
    name: string;
}

export interface GetChallengesChallengeFlag {
    content: string;
    data: string;
    id: string;
    type: string;
}

export interface GetChallengesChallengeHint {
    content: string;
    cost: number;
    id: string;
    requirements: string[];
}

export interface GetChallengesChallengeRequirements {
    /**
     * Behavior if not unlocked, either hidden or anonymized.
     */
    behavior: string;
    /**
     * List of the challenges ID.
     */
    prerequisites: string[];
}

