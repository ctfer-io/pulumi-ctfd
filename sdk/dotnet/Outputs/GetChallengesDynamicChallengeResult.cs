// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CTFerio.Ctfd.Outputs
{

    [OutputType]
    public sealed class GetChallengesDynamicChallengeResult
    {
        /// <summary>
        /// Attribution to the creator(s) of the challenge.
        /// </summary>
        public readonly string Attribution;
        /// <summary>
        /// Category of the challenge that CTFd groups by on the web UI.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// Connection Information to connect to the challenge instance, useful for pwn or web pentest.
        /// </summary>
        public readonly string ConnectionInfo;
        /// <summary>
        /// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
        /// </summary>
        public readonly int Decay;
        /// <summary>
        /// Description of the challenge, consider using multiline descriptions for better style.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
        /// </summary>
        public readonly string Function;
        /// <summary>
        /// Identifier of the challenge.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Maximum amount of attempts before being unable to flag the challenge.
        /// </summary>
        public readonly int MaxAttempts;
        /// <summary>
        /// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
        /// </summary>
        public readonly int Minimum;
        /// <summary>
        /// Name of the challenge, displayed as it.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Suggestion for the end-user as next challenge to work on.
        /// </summary>
        public readonly int Next;
        /// <summary>
        /// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
        /// </summary>
        public readonly Outputs.GetChallengesDynamicChallengeRequirementsResult Requirements;
        /// <summary>
        /// State of the challenge, either hidden or visible.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// List of challenge topics that are displayed to the administrators for maintenance and planification.
        /// </summary>
        public readonly ImmutableArray<string> Topics;
        /// <summary>
        /// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
        /// </summary>
        public readonly int Value;

        [OutputConstructor]
        private GetChallengesDynamicChallengeResult(
            string attribution,

            string category,

            string connectionInfo,

            int decay,

            string description,

            string function,

            string id,

            int maxAttempts,

            int minimum,

            string name,

            int next,

            Outputs.GetChallengesDynamicChallengeRequirementsResult requirements,

            string state,

            ImmutableArray<string> tags,

            ImmutableArray<string> topics,

            int value)
        {
            Attribution = attribution;
            Category = category;
            ConnectionInfo = connectionInfo;
            Decay = decay;
            Description = description;
            Function = function;
            Id = id;
            MaxAttempts = maxAttempts;
            Minimum = minimum;
            Name = name;
            Next = next;
            Requirements = requirements;
            State = state;
            Tags = tags;
            Topics = topics;
            Value = value;
        }
    }
}
