// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CTFerio.Ctfd
{
    /// <summary>
    /// The solution to a challenge.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ctfd = CTFerio.Ctfd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Ctfd.ChallengeStandard("example", new()
    ///     {
    ///         Category = "test",
    ///         Description = "Example challenge description...",
    ///         Value = 500,
    ///     });
    /// 
    ///     var wu = new Ctfd.Solution("wu", new()
    ///     {
    ///         ChallengeId = example.Id,
    ///         Content = "Here is how to solve the challenge: ...",
    ///         State = "visible",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CtfdResourceType("ctfd:index/solution:Solution")]
    public partial class Solution : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Challenge of the solution.
        /// </summary>
        [Output("challengeId")]
        public Output<string> ChallengeId { get; private set; } = null!;

        /// <summary>
        /// The solution to the challenge, in markdown.
        /// </summary>
        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        /// <summary>
        /// State of the solution, either hidden or visible.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a Solution resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Solution(string name, SolutionArgs args, CustomResourceOptions? options = null)
            : base("ctfd:index/solution:Solution", name, args ?? new SolutionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Solution(string name, Input<string> id, SolutionState? state = null, CustomResourceOptions? options = null)
            : base("ctfd:index/solution:Solution", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ctfer-io/",
                AdditionalSecretOutputs =
                {
                    "content",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Solution resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Solution Get(string name, Input<string> id, SolutionState? state = null, CustomResourceOptions? options = null)
        {
            return new Solution(name, id, state, options);
        }
    }

    public sealed class SolutionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Challenge of the solution.
        /// </summary>
        [Input("challengeId", required: true)]
        public Input<string> ChallengeId { get; set; } = null!;

        [Input("content")]
        private Input<string>? _content;

        /// <summary>
        /// The solution to the challenge, in markdown.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// State of the solution, either hidden or visible.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public SolutionArgs()
        {
        }
        public static new SolutionArgs Empty => new SolutionArgs();
    }

    public sealed class SolutionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Challenge of the solution.
        /// </summary>
        [Input("challengeId")]
        public Input<string>? ChallengeId { get; set; }

        [Input("content")]
        private Input<string>? _content;

        /// <summary>
        /// The solution to the challenge, in markdown.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// State of the solution, either hidden or visible.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public SolutionState()
        {
        }
        public static new SolutionState Empty => new SolutionState();
    }
}
