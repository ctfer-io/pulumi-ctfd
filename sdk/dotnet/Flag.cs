// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CTFerio.Ctfd
{
    /// <summary>
    /// A flag to solve the challenge.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ctfd = CTFerio.Ctfd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var http = new Ctfd.ChallengeDynamic("http", new()
    ///     {
    ///         Category = "misc",
    ///         Description = "...",
    ///         Value = 500,
    ///         Decay = 100,
    ///         Minimum = 50,
    ///         State = "visible",
    ///         Function = "logarithmic",
    ///         Topics = new[]
    ///         {
    ///             "Misc",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "misc",
    ///             "basic",
    ///         },
    ///     });
    /// 
    ///     var httpFlag = new Ctfd.Flag("httpFlag", new()
    ///     {
    ///         ChallengeId = http.Id,
    ///         Content = "CTF{some_flag}",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CtfdResourceType("ctfd:index/flag:Flag")]
    public partial class Flag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Challenge of the flag.
        /// </summary>
        [Output("challengeId")]
        public Output<string> ChallengeId { get; private set; } = null!;

        /// <summary>
        /// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The flag sensitivity information, either case*sensitive or case*insensitive
        /// </summary>
        [Output("data")]
        public Output<string> Data { get; private set; } = null!;

        /// <summary>
        /// The type of the flag, could be either static or regex
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Flag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Flag(string name, FlagArgs args, CustomResourceOptions? options = null)
            : base("ctfd:index/flag:Flag", name, args ?? new FlagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Flag(string name, Input<string> id, FlagState? state = null, CustomResourceOptions? options = null)
            : base("ctfd:index/flag:Flag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ctfer-io/",
                AdditionalSecretOutputs =
                {
                    "content",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Flag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Flag Get(string name, Input<string> id, FlagState? state = null, CustomResourceOptions? options = null)
        {
            return new Flag(name, id, state, options);
        }
    }

    public sealed class FlagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Challenge of the flag.
        /// </summary>
        [Input("challengeId", required: true)]
        public Input<string> ChallengeId { get; set; } = null!;

        [Input("content", required: true)]
        private Input<string>? _content;

        /// <summary>
        /// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The flag sensitivity information, either case*sensitive or case*insensitive
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// The type of the flag, could be either static or regex
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public FlagArgs()
        {
        }
        public static new FlagArgs Empty => new FlagArgs();
    }

    public sealed class FlagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Challenge of the flag.
        /// </summary>
        [Input("challengeId")]
        public Input<string>? ChallengeId { get; set; }

        [Input("content")]
        private Input<string>? _content;

        /// <summary>
        /// The actual flag to match. Consider using the convention `MYCTF{value}` with `MYCTF` being the shortcode of your event's name and `value` depending on each challenge.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The flag sensitivity information, either case*sensitive or case*insensitive
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// The type of the flag, could be either static or regex
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public FlagState()
        {
        }
        public static new FlagState Empty => new FlagState();
    }
}
