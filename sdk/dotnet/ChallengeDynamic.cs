// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace CTFerio.Ctfd
{
    /// <summary>
    /// CTFd is built around the Challenge resource, which contains all the attributes to define a part of the Capture The Flag event.
    /// 
    /// This implementation has support of a more dynamic behavior for its scoring through time/solves thus is different from a standard challenge.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ctfd = CTFerio.Ctfd;
    /// 
    /// 	
    /// string ReadFileBase64(string path) 
    /// {
    ///     return Convert.ToBase64String(Encoding.UTF8.GetBytes(File.ReadAllText(path)));
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var http = new Ctfd.ChallengeDynamic("http", new()
    ///     {
    ///         Category = "misc",
    ///         Description = "...",
    ///         Value = 500,
    ///         Decay = 100,
    ///         Minimum = 50,
    ///         State = "visible",
    ///         Function = "logarithmic",
    ///         Topics = new[]
    ///         {
    ///             "Misc",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "misc",
    ///             "basic",
    ///         },
    ///     });
    /// 
    ///     var httpFlag = new Ctfd.Flag("httpFlag", new()
    ///     {
    ///         ChallengeId = http.Id,
    ///         Content = "CTF{some_flag}",
    ///     });
    /// 
    ///     var httpHint1 = new Ctfd.Hint("httpHint1", new()
    ///     {
    ///         ChallengeId = http.Id,
    ///         Content = "Some super-helpful hint",
    ///         Cost = 50,
    ///     });
    /// 
    ///     var httpHint2 = new Ctfd.Hint("httpHint2", new()
    ///     {
    ///         ChallengeId = http.Id,
    ///         Content = "Even more helpful hint !",
    ///         Cost = 50,
    ///         Requirements = new[]
    ///         {
    ///             httpHint1.Id,
    ///         },
    ///     });
    /// 
    ///     var httpFile = new Ctfd.File("httpFile", new()
    ///     {
    ///         ChallengeId = http.Id,
    ///         Contentb64 = ReadFileBase64(".../image.png"),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CtfdResourceType("ctfd:index/challengeDynamic:ChallengeDynamic")]
    public partial class ChallengeDynamic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Attribution to the creator(s) of the challenge.
        /// </summary>
        [Output("attribution")]
        public Output<string?> Attribution { get; private set; } = null!;

        /// <summary>
        /// Category of the challenge that CTFd groups by on the web UI.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
        /// </summary>
        [Output("connectionInfo")]
        public Output<string> ConnectionInfo { get; private set; } = null!;

        /// <summary>
        /// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
        /// </summary>
        [Output("decay")]
        public Output<int> Decay { get; private set; } = null!;

        /// <summary>
        /// Description of the challenge, consider using multiline descriptions for better style.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
        /// </summary>
        [Output("function")]
        public Output<string> Function { get; private set; } = null!;

        /// <summary>
        /// The flag validation logic.
        /// </summary>
        [Output("logic")]
        public Output<string> Logic { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of attempts before being unable to flag the challenge.
        /// </summary>
        [Output("maxAttempts")]
        public Output<int> MaxAttempts { get; private set; } = null!;

        /// <summary>
        /// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
        /// </summary>
        [Output("minimum")]
        public Output<int> Minimum { get; private set; } = null!;

        /// <summary>
        /// Name of the challenge, displayed as it.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Suggestion for the end-user as next challenge to work on.
        /// </summary>
        [Output("next")]
        public Output<int?> Next { get; private set; } = null!;

        /// <summary>
        /// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
        /// </summary>
        [Output("requirements")]
        public Output<Outputs.ChallengeDynamicRequirements?> Requirements { get; private set; } = null!;

        /// <summary>
        /// State of the challenge, either hidden or visible.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// List of challenge topics that are displayed to the administrators for maintenance and planification.
        /// </summary>
        [Output("topics")]
        public Output<ImmutableArray<string>> Topics { get; private set; } = null!;

        /// <summary>
        /// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
        /// </summary>
        [Output("value")]
        public Output<int> Value { get; private set; } = null!;


        /// <summary>
        /// Create a ChallengeDynamic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChallengeDynamic(string name, ChallengeDynamicArgs args, CustomResourceOptions? options = null)
            : base("ctfd:index/challengeDynamic:ChallengeDynamic", name, args ?? new ChallengeDynamicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChallengeDynamic(string name, Input<string> id, ChallengeDynamicState? state = null, CustomResourceOptions? options = null)
            : base("ctfd:index/challengeDynamic:ChallengeDynamic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ctfer-io/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChallengeDynamic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChallengeDynamic Get(string name, Input<string> id, ChallengeDynamicState? state = null, CustomResourceOptions? options = null)
        {
            return new ChallengeDynamic(name, id, state, options);
        }
    }

    public sealed class ChallengeDynamicArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Attribution to the creator(s) of the challenge.
        /// </summary>
        [Input("attribution")]
        public Input<string>? Attribution { get; set; }

        /// <summary>
        /// Category of the challenge that CTFd groups by on the web UI.
        /// </summary>
        [Input("category", required: true)]
        public Input<string> Category { get; set; } = null!;

        /// <summary>
        /// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
        /// </summary>
        [Input("connectionInfo")]
        public Input<string>? ConnectionInfo { get; set; }

        /// <summary>
        /// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
        /// </summary>
        [Input("decay", required: true)]
        public Input<int> Decay { get; set; } = null!;

        /// <summary>
        /// Description of the challenge, consider using multiline descriptions for better style.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
        /// </summary>
        [Input("function")]
        public Input<string>? Function { get; set; }

        /// <summary>
        /// The flag validation logic.
        /// </summary>
        [Input("logic")]
        public Input<string>? Logic { get; set; }

        /// <summary>
        /// Maximum amount of attempts before being unable to flag the challenge.
        /// </summary>
        [Input("maxAttempts")]
        public Input<int>? MaxAttempts { get; set; }

        /// <summary>
        /// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
        /// </summary>
        [Input("minimum", required: true)]
        public Input<int> Minimum { get; set; } = null!;

        /// <summary>
        /// Name of the challenge, displayed as it.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Suggestion for the end-user as next challenge to work on.
        /// </summary>
        [Input("next")]
        public Input<int>? Next { get; set; }

        /// <summary>
        /// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
        /// </summary>
        [Input("requirements")]
        public Input<Inputs.ChallengeDynamicRequirementsArgs>? Requirements { get; set; }

        /// <summary>
        /// State of the challenge, either hidden or visible.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// List of challenge topics that are displayed to the administrators for maintenance and planification.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
        /// </summary>
        [Input("value", required: true)]
        public Input<int> Value { get; set; } = null!;

        public ChallengeDynamicArgs()
        {
        }
        public static new ChallengeDynamicArgs Empty => new ChallengeDynamicArgs();
    }

    public sealed class ChallengeDynamicState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Attribution to the creator(s) of the challenge.
        /// </summary>
        [Input("attribution")]
        public Input<string>? Attribution { get; set; }

        /// <summary>
        /// Category of the challenge that CTFd groups by on the web UI.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// Connection Information to connect to the challenge instance, useful for pwn, web and infrastructure pentests.
        /// </summary>
        [Input("connectionInfo")]
        public Input<string>? ConnectionInfo { get; set; }

        /// <summary>
        /// The decay defines from each number of solves does the decay function triggers until reaching minimum. This function is defined by CTFd and could be configured through `.function`.
        /// </summary>
        [Input("decay")]
        public Input<int>? Decay { get; set; }

        /// <summary>
        /// Description of the challenge, consider using multiline descriptions for better style.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Decay function to define how the challenge value evolve through solves, either linear or logarithmic.
        /// </summary>
        [Input("function")]
        public Input<string>? Function { get; set; }

        /// <summary>
        /// The flag validation logic.
        /// </summary>
        [Input("logic")]
        public Input<string>? Logic { get; set; }

        /// <summary>
        /// Maximum amount of attempts before being unable to flag the challenge.
        /// </summary>
        [Input("maxAttempts")]
        public Input<int>? MaxAttempts { get; set; }

        /// <summary>
        /// The minimum points for a dynamic-score challenge to reach with the decay function. Once there, no solve could have more value.
        /// </summary>
        [Input("minimum")]
        public Input<int>? Minimum { get; set; }

        /// <summary>
        /// Name of the challenge, displayed as it.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Suggestion for the end-user as next challenge to work on.
        /// </summary>
        [Input("next")]
        public Input<int>? Next { get; set; }

        /// <summary>
        /// List of required challenges that needs to get flagged before this one being accessible. Useful for skill-trees-like strategy CTF.
        /// </summary>
        [Input("requirements")]
        public Input<Inputs.ChallengeDynamicRequirementsGetArgs>? Requirements { get; set; }

        /// <summary>
        /// State of the challenge, either hidden or visible.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of challenge tags that will be displayed to the end-user. You could use them to give some quick insights of what a challenge involves.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// List of challenge topics that are displayed to the administrators for maintenance and planification.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// The value (points) of the challenge once solved. It is mapped to `initial` under the hood, but displayed as `value` for consistency with the standard challenge.
        /// </summary>
        [Input("value")]
        public Input<int>? Value { get; set; }

        public ChallengeDynamicState()
        {
        }
        public static new ChallengeDynamicState Empty => new ChallengeDynamicState();
    }
}
