# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['HintArgs', 'Hint']

@pulumi.input_type
class HintArgs:
    def __init__(__self__, *,
                 challenge_id: pulumi.Input[str],
                 content: pulumi.Input[str],
                 cost: Optional[pulumi.Input[int]] = None,
                 requirements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Hint resource.
        :param pulumi.Input[str] challenge_id: Challenge of the hint.
        :param pulumi.Input[str] content: Content of the hint as displayed to the end-user.
        :param pulumi.Input[int] cost: Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requirements: List of the other hints it depends on.
        """
        pulumi.set(__self__, "challenge_id", challenge_id)
        pulumi.set(__self__, "content", content)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if requirements is not None:
            pulumi.set(__self__, "requirements", requirements)

    @property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> pulumi.Input[str]:
        """
        Challenge of the hint.
        """
        return pulumi.get(self, "challenge_id")

    @challenge_id.setter
    def challenge_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "challenge_id", value)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Content of the hint as displayed to the end-user.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of the other hints it depends on.
        """
        return pulumi.get(self, "requirements")

    @requirements.setter
    def requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requirements", value)


@pulumi.input_type
class _HintState:
    def __init__(__self__, *,
                 challenge_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 requirements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Hint resources.
        :param pulumi.Input[str] challenge_id: Challenge of the hint.
        :param pulumi.Input[str] content: Content of the hint as displayed to the end-user.
        :param pulumi.Input[int] cost: Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requirements: List of the other hints it depends on.
        """
        if challenge_id is not None:
            pulumi.set(__self__, "challenge_id", challenge_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if requirements is not None:
            pulumi.set(__self__, "requirements", requirements)

    @property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> Optional[pulumi.Input[str]]:
        """
        Challenge of the hint.
        """
        return pulumi.get(self, "challenge_id")

    @challenge_id.setter
    def challenge_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "challenge_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of the hint as displayed to the end-user.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of the other hints it depends on.
        """
        return pulumi.get(self, "requirements")

    @requirements.setter
    def requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requirements", value)


class Hint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 challenge_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 requirements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        A hint for a challenge to help players solve it.

        ## Example Usage

        ```python
        import pulumi
        import ctfer-io_pulumi-ctfd as ctfd

        http = ctfd.Challenge("http",
            category="misc",
            description="...",
            value=500,
            decay=100,
            minimum=50,
            state="visible",
            function="logarithmic",
            topics=["Misc"],
            tags=[
                "misc",
                "basic",
            ])
        http_flag = ctfd.Flag("httpFlag",
            challenge_id=http.id,
            content="CTF{some_flag}")
        http_hint = ctfd.Hint("httpHint",
            challenge_id=http.id,
            content="Some super-helpful hint",
            cost=50)
        http_hint2 = ctfd.Hint("httpHint2",
            challenge_id=http.id,
            content="Even more helpful hint !",
            cost=50,
            requirements=[ctfd_hint["http_hint_1"]["id"]])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] challenge_id: Challenge of the hint.
        :param pulumi.Input[str] content: Content of the hint as displayed to the end-user.
        :param pulumi.Input[int] cost: Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requirements: List of the other hints it depends on.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HintArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A hint for a challenge to help players solve it.

        ## Example Usage

        ```python
        import pulumi
        import ctfer-io_pulumi-ctfd as ctfd

        http = ctfd.Challenge("http",
            category="misc",
            description="...",
            value=500,
            decay=100,
            minimum=50,
            state="visible",
            function="logarithmic",
            topics=["Misc"],
            tags=[
                "misc",
                "basic",
            ])
        http_flag = ctfd.Flag("httpFlag",
            challenge_id=http.id,
            content="CTF{some_flag}")
        http_hint = ctfd.Hint("httpHint",
            challenge_id=http.id,
            content="Some super-helpful hint",
            cost=50)
        http_hint2 = ctfd.Hint("httpHint2",
            challenge_id=http.id,
            content="Even more helpful hint !",
            cost=50,
            requirements=[ctfd_hint["http_hint_1"]["id"]])
        ```

        :param str resource_name: The name of the resource.
        :param HintArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HintArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 challenge_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 requirements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HintArgs.__new__(HintArgs)

            if challenge_id is None and not opts.urn:
                raise TypeError("Missing required property 'challenge_id'")
            __props__.__dict__["challenge_id"] = challenge_id
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["cost"] = cost
            __props__.__dict__["requirements"] = requirements
        super(Hint, __self__).__init__(
            'ctfd:index/hint:Hint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            challenge_id: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            cost: Optional[pulumi.Input[int]] = None,
            requirements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Hint':
        """
        Get an existing Hint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] challenge_id: Challenge of the hint.
        :param pulumi.Input[str] content: Content of the hint as displayed to the end-user.
        :param pulumi.Input[int] cost: Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] requirements: List of the other hints it depends on.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HintState.__new__(_HintState)

        __props__.__dict__["challenge_id"] = challenge_id
        __props__.__dict__["content"] = content
        __props__.__dict__["cost"] = cost
        __props__.__dict__["requirements"] = requirements
        return Hint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> pulumi.Output[str]:
        """
        Challenge of the hint.
        """
        return pulumi.get(self, "challenge_id")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Content of the hint as displayed to the end-user.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def cost(self) -> pulumi.Output[int]:
        """
        Cost of the hint, and if any specified, the end-user will consume its own (or team) points to get it.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def requirements(self) -> pulumi.Output[Sequence[str]]:
        """
        List of the other hints it depends on.
        """
        return pulumi.get(self, "requirements")

