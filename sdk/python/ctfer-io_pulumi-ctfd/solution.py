# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SolutionArgs', 'Solution']

@pulumi.input_type
class SolutionArgs:
    def __init__(__self__, *,
                 challenge_id: pulumi.Input[_builtins.str],
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Solution resource.
        :param pulumi.Input[_builtins.str] challenge_id: Challenge of the solution.
        :param pulumi.Input[_builtins.str] content: The solution to the challenge, in markdown.
        :param pulumi.Input[_builtins.str] state: State of the solution, either hidden or visible.
        """
        pulumi.set(__self__, "challenge_id", challenge_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> pulumi.Input[_builtins.str]:
        """
        Challenge of the solution.
        """
        return pulumi.get(self, "challenge_id")

    @challenge_id.setter
    def challenge_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "challenge_id", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The solution to the challenge, in markdown.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        State of the solution, either hidden or visible.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _SolutionState:
    def __init__(__self__, *,
                 challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Solution resources.
        :param pulumi.Input[_builtins.str] challenge_id: Challenge of the solution.
        :param pulumi.Input[_builtins.str] content: The solution to the challenge, in markdown.
        :param pulumi.Input[_builtins.str] state: State of the solution, either hidden or visible.
        """
        if challenge_id is not None:
            pulumi.set(__self__, "challenge_id", challenge_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Challenge of the solution.
        """
        return pulumi.get(self, "challenge_id")

    @challenge_id.setter
    def challenge_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "challenge_id", value)

    @_builtins.property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The solution to the challenge, in markdown.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        State of the solution, either hidden or visible.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


@pulumi.type_token("ctfd:index/solution:Solution")
class Solution(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        The solution to a challenge.

        ## Example Usage

        ```python
        import pulumi
        import ctfer-io_pulumi-ctfd as ctfd

        example = ctfd.ChallengeStandard("example",
            category="test",
            description="Example challenge description...",
            value=500)
        wu = ctfd.Solution("wu",
            challenge_id=example.id,
            content="Here is how to solve the challenge: ...",
            state="visible")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] challenge_id: Challenge of the solution.
        :param pulumi.Input[_builtins.str] content: The solution to the challenge, in markdown.
        :param pulumi.Input[_builtins.str] state: State of the solution, either hidden or visible.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SolutionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The solution to a challenge.

        ## Example Usage

        ```python
        import pulumi
        import ctfer-io_pulumi-ctfd as ctfd

        example = ctfd.ChallengeStandard("example",
            category="test",
            description="Example challenge description...",
            value=500)
        wu = ctfd.Solution("wu",
            challenge_id=example.id,
            content="Here is how to solve the challenge: ...",
            state="visible")
        ```

        :param str resource_name: The name of the resource.
        :param SolutionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SolutionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
                 content: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SolutionArgs.__new__(SolutionArgs)

            if challenge_id is None and not opts.urn:
                raise TypeError("Missing required property 'challenge_id'")
            __props__.__dict__["challenge_id"] = challenge_id
            __props__.__dict__["content"] = None if content is None else pulumi.Output.secret(content)
            __props__.__dict__["state"] = state
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["content"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Solution, __self__).__init__(
            'ctfd:index/solution:Solution',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            challenge_id: Optional[pulumi.Input[_builtins.str]] = None,
            content: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None) -> 'Solution':
        """
        Get an existing Solution resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] challenge_id: Challenge of the solution.
        :param pulumi.Input[_builtins.str] content: The solution to the challenge, in markdown.
        :param pulumi.Input[_builtins.str] state: State of the solution, either hidden or visible.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SolutionState.__new__(_SolutionState)

        __props__.__dict__["challenge_id"] = challenge_id
        __props__.__dict__["content"] = content
        __props__.__dict__["state"] = state
        return Solution(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="challengeId")
    def challenge_id(self) -> pulumi.Output[_builtins.str]:
        """
        Challenge of the solution.
        """
        return pulumi.get(self, "challenge_id")

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The solution to the challenge, in markdown.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        State of the solution, either hidden or visible.
        """
        return pulumi.get(self, "state")

