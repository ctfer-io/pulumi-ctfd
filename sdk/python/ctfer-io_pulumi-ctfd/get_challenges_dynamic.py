# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetChallengesDynamicResult',
    'AwaitableGetChallengesDynamicResult',
    'get_challenges_dynamic',
    'get_challenges_dynamic_output',
]

@pulumi.output_type
class GetChallengesDynamicResult:
    """
    A collection of values returned by getChallengesDynamic.
    """
    def __init__(__self__, challenges=None, id=None):
        if challenges and not isinstance(challenges, list):
            raise TypeError("Expected argument 'challenges' to be a list")
        pulumi.set(__self__, "challenges", challenges)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def challenges(self) -> Sequence['outputs.GetChallengesDynamicChallengeResult']:
        return pulumi.get(self, "challenges")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetChallengesDynamicResult(GetChallengesDynamicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetChallengesDynamicResult(
            challenges=self.challenges,
            id=self.id)


def get_challenges_dynamic(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetChallengesDynamicResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ctfd:index/getChallengesDynamic:getChallengesDynamic', __args__, opts=opts, typ=GetChallengesDynamicResult).value

    return AwaitableGetChallengesDynamicResult(
        challenges=pulumi.get(__ret__, 'challenges'),
        id=pulumi.get(__ret__, 'id'))
def get_challenges_dynamic_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetChallengesDynamicResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ctfd:index/getChallengesDynamic:getChallengesDynamic', __args__, opts=opts, typ=GetChallengesDynamicResult)
    return __ret__.apply(lambda __response__: GetChallengesDynamicResult(
        challenges=pulumi.get(__response__, 'challenges'),
        id=pulumi.get(__response__, 'id')))
