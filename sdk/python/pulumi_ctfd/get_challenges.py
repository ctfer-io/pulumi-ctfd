# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetChallengesResult',
    'AwaitableGetChallengesResult',
    'get_challenges',
    'get_challenges_output',
]

@pulumi.output_type
class GetChallengesResult:
    """
    A collection of values returned by getChallenges.
    """
    def __init__(__self__, challenges=None, id=None):
        if challenges and not isinstance(challenges, list):
            raise TypeError("Expected argument 'challenges' to be a list")
        pulumi.set(__self__, "challenges", challenges)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def challenges(self) -> Sequence['outputs.GetChallengesChallengeResult']:
        return pulumi.get(self, "challenges")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetChallengesResult(GetChallengesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetChallengesResult(
            challenges=self.challenges,
            id=self.id)


def get_challenges(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetChallengesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ctfd:index/getChallenges:getChallenges', __args__, opts=opts, typ=GetChallengesResult).value

    return AwaitableGetChallengesResult(
        challenges=pulumi.get(__ret__, 'challenges'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_challenges)
def get_challenges_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetChallengesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
