# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TeamArgs', 'Team']

@pulumi.input_type
class TeamArgs:
    def __init__(__self__, *,
                 captain: pulumi.Input[str],
                 email: pulumi.Input[str],
                 members: pulumi.Input[Sequence[pulumi.Input[str]]],
                 password: pulumi.Input[str],
                 affiliation: Optional[pulumi.Input[str]] = None,
                 banned: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Team resource.
        :param pulumi.Input[str] captain: Member who is captain of the team. Must be part of the members too.
        :param pulumi.Input[str] email: Email of the team.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of members (User), defined by their IDs.
        :param pulumi.Input[str] password: Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
        :param pulumi.Input[str] affiliation: Affiliation to a company or agency.
        :param pulumi.Input[bool] banned: Is true if the team is banned from the CTF.
        :param pulumi.Input[str] country: Country the team represent or is hail from.
        :param pulumi.Input[bool] hidden: Is true if the team is hidden to the participants.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[str] website: Website, blog, or anything similar (displayed to other participants).
        """
        pulumi.set(__self__, "captain", captain)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "password", password)
        if affiliation is not None:
            pulumi.set(__self__, "affiliation", affiliation)
        if banned is not None:
            pulumi.set(__self__, "banned", banned)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def captain(self) -> pulumi.Input[str]:
        """
        Member who is captain of the team. Must be part of the members too.
        """
        return pulumi.get(self, "captain")

    @captain.setter
    def captain(self, value: pulumi.Input[str]):
        pulumi.set(self, "captain", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Email of the team.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def members(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of members (User), defined by their IDs.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def affiliation(self) -> Optional[pulumi.Input[str]]:
        """
        Affiliation to a company or agency.
        """
        return pulumi.get(self, "affiliation")

    @affiliation.setter
    def affiliation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "affiliation", value)

    @property
    @pulumi.getter
    def banned(self) -> Optional[pulumi.Input[bool]]:
        """
        Is true if the team is banned from the CTF.
        """
        return pulumi.get(self, "banned")

    @banned.setter
    def banned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "banned", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country the team represent or is hail from.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        Is true if the team is hidden to the participants.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        """
        Website, blog, or anything similar (displayed to other participants).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _TeamState:
    def __init__(__self__, *,
                 affiliation: Optional[pulumi.Input[str]] = None,
                 banned: Optional[pulumi.Input[bool]] = None,
                 captain: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Team resources.
        :param pulumi.Input[str] affiliation: Affiliation to a company or agency.
        :param pulumi.Input[bool] banned: Is true if the team is banned from the CTF.
        :param pulumi.Input[str] captain: Member who is captain of the team. Must be part of the members too.
        :param pulumi.Input[str] country: Country the team represent or is hail from.
        :param pulumi.Input[str] email: Email of the team.
        :param pulumi.Input[bool] hidden: Is true if the team is hidden to the participants.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of members (User), defined by their IDs.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[str] password: Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
        :param pulumi.Input[str] website: Website, blog, or anything similar (displayed to other participants).
        """
        if affiliation is not None:
            pulumi.set(__self__, "affiliation", affiliation)
        if banned is not None:
            pulumi.set(__self__, "banned", banned)
        if captain is not None:
            pulumi.set(__self__, "captain", captain)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def affiliation(self) -> Optional[pulumi.Input[str]]:
        """
        Affiliation to a company or agency.
        """
        return pulumi.get(self, "affiliation")

    @affiliation.setter
    def affiliation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "affiliation", value)

    @property
    @pulumi.getter
    def banned(self) -> Optional[pulumi.Input[bool]]:
        """
        Is true if the team is banned from the CTF.
        """
        return pulumi.get(self, "banned")

    @banned.setter
    def banned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "banned", value)

    @property
    @pulumi.getter
    def captain(self) -> Optional[pulumi.Input[str]]:
        """
        Member who is captain of the team. Must be part of the members too.
        """
        return pulumi.get(self, "captain")

    @captain.setter
    def captain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "captain", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country the team represent or is hail from.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the team.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        Is true if the team is hidden to the participants.
        """
        return pulumi.get(self, "hidden")

    @hidden.setter
    def hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hidden", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of members (User), defined by their IDs.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        """
        Website, blog, or anything similar (displayed to other participants).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


class Team(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affiliation: Optional[pulumi.Input[str]] = None,
                 banned: Optional[pulumi.Input[bool]] = None,
                 captain: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        CTFd defines a Team as a group of Users who will attend the Capture The Flag event.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ctfd as ctfd

        ctfer = ctfd.User("ctfer",
            email="ctfer-io@protonmail.com",
            password="password")
        cybercombattants = ctfd.Team("cybercombattants",
            email="lucastesson@protonmail.com",
            password="password",
            members=[ctfer.id],
            captain=ctfer.id)
        ```

        ## Import

        User can be imported by the CTFd ID (check URLs)

        ```sh
        $ pulumi import ctfd:index/team:Team cybercombattants 1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] affiliation: Affiliation to a company or agency.
        :param pulumi.Input[bool] banned: Is true if the team is banned from the CTF.
        :param pulumi.Input[str] captain: Member who is captain of the team. Must be part of the members too.
        :param pulumi.Input[str] country: Country the team represent or is hail from.
        :param pulumi.Input[str] email: Email of the team.
        :param pulumi.Input[bool] hidden: Is true if the team is hidden to the participants.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of members (User), defined by their IDs.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[str] password: Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
        :param pulumi.Input[str] website: Website, blog, or anything similar (displayed to other participants).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CTFd defines a Team as a group of Users who will attend the Capture The Flag event.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_ctfd as ctfd

        ctfer = ctfd.User("ctfer",
            email="ctfer-io@protonmail.com",
            password="password")
        cybercombattants = ctfd.Team("cybercombattants",
            email="lucastesson@protonmail.com",
            password="password",
            members=[ctfer.id],
            captain=ctfer.id)
        ```

        ## Import

        User can be imported by the CTFd ID (check URLs)

        ```sh
        $ pulumi import ctfd:index/team:Team cybercombattants 1
        ```

        :param str resource_name: The name of the resource.
        :param TeamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 affiliation: Optional[pulumi.Input[str]] = None,
                 banned: Optional[pulumi.Input[bool]] = None,
                 captain: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 hidden: Optional[pulumi.Input[bool]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamArgs.__new__(TeamArgs)

            __props__.__dict__["affiliation"] = affiliation
            __props__.__dict__["banned"] = banned
            if captain is None and not opts.urn:
                raise TypeError("Missing required property 'captain'")
            __props__.__dict__["captain"] = captain
            __props__.__dict__["country"] = country
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["hidden"] = hidden
            if members is None and not opts.urn:
                raise TypeError("Missing required property 'members'")
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            __props__.__dict__["website"] = website
        super(Team, __self__).__init__(
            'ctfd:index/team:Team',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            affiliation: Optional[pulumi.Input[str]] = None,
            banned: Optional[pulumi.Input[bool]] = None,
            captain: Optional[pulumi.Input[str]] = None,
            country: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            hidden: Optional[pulumi.Input[bool]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            website: Optional[pulumi.Input[str]] = None) -> 'Team':
        """
        Get an existing Team resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] affiliation: Affiliation to a company or agency.
        :param pulumi.Input[bool] banned: Is true if the team is banned from the CTF.
        :param pulumi.Input[str] captain: Member who is captain of the team. Must be part of the members too.
        :param pulumi.Input[str] country: Country the team represent or is hail from.
        :param pulumi.Input[str] email: Email of the team.
        :param pulumi.Input[bool] hidden: Is true if the team is hidden to the participants.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: List of members (User), defined by their IDs.
        :param pulumi.Input[str] name: Name of the team.
        :param pulumi.Input[str] password: Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
        :param pulumi.Input[str] website: Website, blog, or anything similar (displayed to other participants).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamState.__new__(_TeamState)

        __props__.__dict__["affiliation"] = affiliation
        __props__.__dict__["banned"] = banned
        __props__.__dict__["captain"] = captain
        __props__.__dict__["country"] = country
        __props__.__dict__["email"] = email
        __props__.__dict__["hidden"] = hidden
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["website"] = website
        return Team(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def affiliation(self) -> pulumi.Output[Optional[str]]:
        """
        Affiliation to a company or agency.
        """
        return pulumi.get(self, "affiliation")

    @property
    @pulumi.getter
    def banned(self) -> pulumi.Output[bool]:
        """
        Is true if the team is banned from the CTF.
        """
        return pulumi.get(self, "banned")

    @property
    @pulumi.getter
    def captain(self) -> pulumi.Output[str]:
        """
        Member who is captain of the team. Must be part of the members too.
        """
        return pulumi.get(self, "captain")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[Optional[str]]:
        """
        Country the team represent or is hail from.
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        Email of the team.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def hidden(self) -> pulumi.Output[bool]:
        """
        Is true if the team is hidden to the participants.
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Sequence[str]]:
        """
        List of members (User), defined by their IDs.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password of the team. Notice that during a CTF you may not want to update those to avoid defaulting team accesses.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional[str]]:
        """
        Website, blog, or anything similar (displayed to other participants).
        """
        return pulumi.get(self, "website")

