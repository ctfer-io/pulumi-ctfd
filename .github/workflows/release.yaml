name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read

jobs:
  publish_provider:
    runs-on: ubuntu-latest
    name: Publish Provider
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    permissions:
      contents: write  # for goreleaser/goreleaser-action to create a GitHub release
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: 'go.work'

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@9fece9e20048ca9590af301449208b2b8861333b # v0.15.9

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@71d17cb091aa850acb2a1a4cf87258d183eb941b # v1.11.0
        with:
          repo: pulumi/pulumictl

      - name: Set PreRelease Version
        run: echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic)" >> $GITHUB_ENV

      - name: Run GoReleaser
        id: run-goreleaser
        uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8 # v5.0.0
        with:
          args: -p 3 release --clean --timeout 60m0s
          version: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate subject
        id: hash
        env:
          ARTIFACTS: "${{ steps.run-goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail

          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "hashes=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"

  provenance:
    needs: [publish_provider]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@07e64b653f10a80b6510f4568f685f8b7b9ea830 # v1.9.0
    with:
      base64-subjects: "${{ needs.publish_provider.outputs.hashes }}"
      upload-assets: true # upload to a new release
  verification:
    needs: [publish_provider, provenance]
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Install the verifier
        uses: slsa-framework/slsa-verifier/actions/installer@7e1e47d7d793930ab0082c15c2b971fdb53a3c95 # v2.4.1

      - name: Download assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "*.tar.gz"
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "*.sbom"
          gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "$PROVENANCE"
      - name: Verify assets
        env:
          CHECKSUMS: ${{ needs.publish_provider.outputs.hashes }}
          PROVENANCE: "${{ needs.provenance.outputs.provenance-name }}"
        run: |
          set -euo pipefail
          checksums=$(echo "$CHECKSUMS" | base64 -d)
          while read -r line; do
              fn=$(echo $line | cut -d ' ' -f2)
              echo "Verifying $fn"
              slsa-verifier verify-artifact --provenance-path "$PROVENANCE" \
                                            --source-uri "github.com/$GITHUB_REPOSITORY" \
                                            --source-tag "$GITHUB_REF_NAME" \
                                            "$fn"
          done <<<"$checksums"

  publish_sdk:
    runs-on: ubuntu-latest
    name: Publish SDK
    permissions:
      id-token: write
      contents: read
    needs: [publish_provider]
    strategy:
      max-parallel: 10
      matrix:
        node-version: [18.x]
        dotnet-version: [3.1.301]
        python-version: [3.9]
        language:
          - go
          - nodejs
          - python
          - dotnet
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: 'go.work'
          cache: true

      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@71d17cb091aa850acb2a1a4cf87258d183eb941b # v1.11.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@76683de37aa44910871ba6cef36557780f2e41d1 # v5.1.1

      - name: Setup DotNet
        uses: actions/setup-dotnet@4d6c8fcf3c8f7a60068d26b594648e99df24cee3 # v4.0.0
        with:
          dotnet-version: "${{ matrix.dotnet-version }}"
        if: matrix.language == 'dotnet'
      - name: Setup Python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: "${{ matrix.python-version }}"
        if: matrix.language == 'python'
      - name: Use Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: "${{ matrix.node-version }}"
        if: matrix.language == 'nodejs'

      - name: Install Plugins
        run: make install_plugins
      - name: Update Path
        run: echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      - name: Build SDK
        run: make build_${{ matrix.language }}

      - name: Publish .NET SDK
        run: |
          dotnet nuget push -s "${{ env.NUGET_FEED_URL }}" -k "${{ secrets.NUGET_PUBLISH_KEY }}" ${{github.workspace}}/sdk/dotnet/bin/Debug/*.nupkg
        env:
          NUGET_PUBLISH_KEY: ${{ secrets.NUGET_TOKEN }}
          NUGET_FEED_URL: https://api.nuget.org/v3/index.json
        if: matrix.language == 'dotnet'

      - name: Publish Python SDK
        uses: pypa/gh-action-pypi-publish@e53eb8b103ffcb59469888563dc324e3c8ba6f06 #Â v1.8.12
        with:
          skip-existing: true
          packages-dir: "${{ github.workspace }}/sdk/python/bin/dist/"
        if: matrix.language == 'python'

      - name: Publish NodeJS SDK
        uses: JS-DevTools/npm-publish@4b07b26a2f6e0a51846e1870223e545bae91c552 # v3.0.1
        with:
          package: ./sdk/nodejs/bin/package.json
          access: public
          token: ${{ secrets.NPM_TOKEN }}
          provenance: true
        if: matrix.language == 'nodejs'

  tag_sdk:
    runs-on: ubuntu-latest
    name: Tag SDK Release
    permissions:
      id-token: write
      contents: write
    needs:
      - publish_sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
      - name: Setup Git
        run: |
          git config --local user.email "ctfer-io@protonmail.com"
          git config --local user.name "ctfer-io[bot]"

      - name: Get Tag Name
        run: |
          REF_NAME=`git describe --abbrev=0 --tags`
          echo "REF_NAME=${REF_NAME}" >> $GITHUB_ENV

      - name: Tag SDK Version
        run: |
          git tag -a sdk/${{ env.REF_NAME }} -m sdk/${{ env.REF_NAME }}
      - name: Push to Repository
        run: |
          git push origin sdk/${{ env.REF_NAME }}
